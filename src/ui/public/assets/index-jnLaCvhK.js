import{d as Qe,r as f,E as r,o as Ve,a as pt,l as mt,b as ze,c as _e,e as w,f as m,g as e,h as t,i as Ie,u as l,w as a,j as et,k as Ze,m as vt,n as ge,p as gt,q as oe,s as Pe,t as Ae,v as B,x as V,y as ye,F as de,z as me,A as Ge,B as Ee,C as tt,D as st,G as Be,H as De,I as yt,J as Q,K as at,L as ht,M as _t,N as be,O as lt,P as ot,Q as Fe,R as nt,S as Me,T as Ne,U as xe,V as it,W as rt,X as wt,Y as Xe,Z as Ke,_ as $t,$ as Ct,a0 as kt,a1 as bt,a2 as St,a3 as Tt,a4 as Le,a5 as Vt,a6 as Lt,a7 as Rt,a8 as Se,a9 as Gt,aa as Dt,ab as xt,ac as zt,ad as Et}from"./vendor-B7N9pBHK.js";(function(){const y=document.createElement("link").relList;if(y&&y.supports&&y.supports("modulepreload"))return;for(const d of document.querySelectorAll('link[rel="modulepreload"]'))h(d);new MutationObserver(d=>{for(const j of d)if(j.type==="childList")for(const G of j.addedNodes)G.tagName==="LINK"&&G.rel==="modulepreload"&&h(G)}).observe(document,{childList:!0,subtree:!0});function R(d){const j={};return d.integrity&&(j.integrity=d.integrity),d.referrerPolicy&&(j.referrerPolicy=d.referrerPolicy),d.crossOrigin==="use-credentials"?j.credentials="include":d.crossOrigin==="anonymous"?j.credentials="omit":j.credentials="same-origin",j}function h(d){if(d.ep)return;d.ep=!0;const j=R(d);fetch(d.href,j)}})();const we=Qe("git",()=>{const Z=f(""),y=f([]),R=f(""),h=f(""),d=f(!1),j=f(!1),G=f(!1),J=f(0);function te(){Z.value="",y.value=[],R.value="",h.value="",d.value=!1,j.value=!1,G.value=!1,J.value=0}async function M(){const C=Date.now();if(C-J.value<1e3)return console.log("使用缓存的Git仓库状态:",G.value?"是":"不是"),G.value;try{const W=await(await fetch("/api/current_directory")).json();return G.value=W.isGitRepo===!0,J.value=C,console.log(`当前目录${G.value?"是":"不是"}Git仓库`),G.value}catch(g){return console.error("检查Git仓库状态失败:",g),G.value=!1,J.value=C,!1}}async function F(){try{const g=await(await fetch("/api/branch")).json();g.branch&&(Z.value=g.branch)}catch(C){console.error("获取分支信息失败:",C)}}async function I(){try{const g=await(await fetch("/api/branches")).json();g.branches&&Array.isArray(g.branches)&&(y.value=g.branches)}catch(C){console.error("获取所有分支信息失败:",C)}}async function A(C){console.log("切换到分支:",C);try{d.value=!0;const W=await(await fetch("/api/checkout",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({branch:C})})).json();return W.success?(r({message:`已切换到分支: ${C}`,type:"success"}),F(),!0):(r({message:`切换分支失败: ${W.error}`,type:"error"}),!1)}catch(g){return r({message:`切换分支失败: ${g.message}`,type:"error"}),!1}finally{d.value=!1}}async function X(){try{const g=await(await fetch("/api/user-info")).json();g.name&&g.email&&(R.value=g.name,h.value=g.email)}catch(C){console.error("获取用户信息失败:",C)}}async function Y(C,g){if(!C.trim())return r({message:"分支名称不能为空",type:"warning"}),!1;try{j.value=!0;const N=await(await fetch("/api/create-branch",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({newBranchName:C,baseBranch:g||Z.value})})).json();return N.success?(r({message:`已创建并切换到分支: ${C}`,type:"success"}),F(),I(),!0):(r({message:`创建分支失败: ${N.error}`,type:"error"}),!1)}catch(W){return r({message:`创建分支失败: ${W.message}`,type:"error"}),!1}finally{j.value=!1}}async function L(){await M()?(F(),I(),X()):(Z.value="",y.value=[],R.value="",h.value="")}async function D(){try{const g=await(await fetch("/api/clear-user-config",{method:"POST"})).json();return g.success?(R.value="",h.value="",r({message:"已清除Git用户配置",type:"success"}),!0):(r({message:`清除配置失败: ${g.error}`,type:"error"}),!1)}catch(C){return r({message:`清除配置失败: ${C.message}`,type:"error"}),!1}}async function O(C,g){try{const N=await(await fetch("/api/restore-user-config",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:C,email:g})})).json();return N.success?(R.value=C,h.value=g,r({message:"已恢复Git用户配置",type:"success"}),!0):(r({message:`恢复配置失败: ${N.error}`,type:"error"}),!1)}catch(W){return r({message:`恢复配置失败: ${W.message}`,type:"error"}),!1}}return{currentBranch:Z,allBranches:y,userName:R,userEmail:h,isChangingBranch:d,isCreatingBranch:j,isGitRepo:G,lastCheckedTime:J,$reset:te,checkGitRepo:M,getCurrentBranch:F,getAllBranches:I,changeBranch:A,getUserInfo:X,createBranch:Y,loadInitialData:L,clearUserConfig:D,restoreUserConfig:O}}),Oe=300,He=Qe("gitLog",()=>{const Z=we();let y=null;const R=f(!0),h=f([]),d=f({staged:[],unstaged:[],untracked:[]}),j=f(""),G=f([]),J=f(!1),te=f(!1),M=f(!1),F=f(!1),I=f(!1),A=f(!1);function X(){y&&y.disconnect();try{y=mt(window.location.origin,{reconnectionDelayMax:1e4}),y.on("connect",()=>{console.log("成功连接到Socket.IO服务器"),R.value&&y&&y.emit("start_monitoring")}),y.on("disconnect",v=>{console.log("与Socket.IO服务器断开连接:",v)}),y.on("git_status_update",v=>{if(!R.value)return;console.log("收到Git状态更新通知:",new Date().toLocaleTimeString()),v.status&&(j.value=v.status),v.porcelain!==void 0&&L(v.porcelain),G.value.length>0&&D(!1)}),y.on("monitoring_status",v=>{console.log("文件监控状态:",v.active?"已启动":"已停止")})}catch(v){console.error("Socket.IO连接初始化失败:",v)}}function Y(){y&&(R.value?(y==null||y.emit("start_monitoring"),r.success("自动更新已启用")):(y==null||y.emit("stop_monitoring"),r.info("自动更新已禁用")),localStorage.setItem("zen-gitsync-auto-update",R.value.toString()))}function L(v){if(v===void 0||v===""){G.value=[];return}const b=v.split(`
`),H=[];for(const ae of b){const ce=ae.match(/^([ MADRCU\?]{2})\s+(.+)$/);if(ce){let le="";const S=ce[1],o=S.charAt(0),U=S.charAt(1);o==="A"||o==="M"||o==="D"||o==="R"?le="added":o===" "&&U==="M"?le="modified":o===" "&&U==="D"?le="deleted":S==="??"?le="untracked":le="other",H.push({path:ce[2],type:le})}}G.value=H}async function D(v=!0){if(!Z.isGitRepo){console.log("当前目录不是Git仓库，跳过加载提交历史");return}try{J.value=!0,console.log("开始加载提交历史...");const H=await(await fetch("/api/log")).json();H&&Array.isArray(H)&&(h.value=H),console.log(`提交历史加载完成，共 ${h.value.length} 条记录`),v&&r({message:"提交历史已更新",type:"success"})}catch(b){console.error("获取提交历史失败:",b),v&&r({message:`获取提交历史失败: ${b.message}`,type:"error"})}finally{J.value=!1}}async function O(){if(!Z.isGitRepo){console.log("当前目录不是Git仓库，跳过加载Git状态");return}try{te.value=!0;const b=await(await fetch("/api/status")).json();b.status&&(j.value=b.status,d.value={staged:b.status.staged||[],unstaged:b.status.unstaged||[],untracked:b.status.untracked||[]}),await C()}catch(v){console.error("获取Git状态失败:",v),r({message:`获取Git状态失败: ${v.message}`,type:"error"})}finally{te.value=!1}}async function C(){if(!Z.isGitRepo){console.log("当前目录不是Git仓库，跳过加载Git状态");return}try{const b=await(await fetch("/api/status_porcelain")).json();b.status!==void 0?L(b.status):G.value=[]}catch(v){console.error("获取Git状态(porcelain)失败:",v),r({message:`获取Git状态(porcelain)失败: ${v.message}`,type:"error"}),G.value=[]}}async function g(){if(!Z.isGitRepo)return r.warning("当前目录不是Git仓库"),!1;try{M.value=!0;const b=await(await fetch("/api/add",{method:"POST"})).json();return b.success?(r({message:"文件已添加到暂存区",type:"success"}),O(),!0):(r({message:`添加文件失败: ${b.error}`,type:"error"}),!1)}catch(v){return r({message:`添加文件失败: ${v.message}`,type:"error"}),!1}finally{M.value=!1}}async function W(v){if(!Z.isGitRepo)return r.warning("当前目录不是Git仓库"),!1;try{M.value=!0;const H=await(await fetch("/api/add-file",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({filePath:v})})).json();return H.success?(r({message:"文件已暂存",type:"success"}),O(),!0):(r({message:`暂存文件失败: ${H.error}`,type:"error"}),!1)}catch(b){return r({message:`暂存文件失败: ${b.message}`,type:"error"}),!1}finally{M.value=!1}}async function N(v){if(!Z.isGitRepo)return r.warning("当前目录不是Git仓库"),!1;try{A.value=!0;const H=await(await fetch("/api/unstage-file",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({filePath:v})})).json();return H.success?(r({message:"已取消暂存文件",type:"success"}),O(),!0):(r({message:`取消暂存失败: ${H.error}`,type:"error"}),!1)}catch(b){return r({message:`取消暂存失败: ${b.message}`,type:"error"}),!1}finally{A.value=!1}}function q(v){return new Promise(b=>setTimeout(b,v))}async function ee(v,b=!1){if(!Z.isGitRepo)return r.warning("当前目录不是Git仓库"),!1;try{F.value=!0;const ae=await(await fetch("/api/commit",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({message:v,hasNewlines:v.includes(`
`),noVerify:b})})).json();return ae.success?(r({message:"提交成功",type:"success"}),O(),D(),!0):(r({message:`提交失败: ${ae.error}`,type:"error"}),!1)}catch(H){return r({message:`提交失败: ${H.message}`,type:"error"}),!1}finally{F.value=!1}}async function K(){if(!Z.isGitRepo)return r.warning("当前目录不是Git仓库"),!1;try{I.value=!0;const b=await(await fetch("/api/push",{method:"POST"})).json();return b.success?(r({message:"推送成功",type:"success"}),O(),D(),!0):(r({message:`推送失败: ${b.error}`,type:"error"}),!1)}catch(v){return r({message:`推送失败: ${v.message}`,type:"error"}),!1}finally{I.value=!1}}async function re(v,b=!1){return await g()?(await q(Oe),await ee(v,b)):!1}async function fe(v,b=!1){try{return!await g()||(await q(Oe),!await ee(v,b))?!1:(await q(Oe),await K())}catch(H){try{(await(await fetch("/api/remove-lock",{method:"POST"})).json()).success&&r({message:"已清理锁定文件，请重试操作",type:"warning"})}catch(ae){console.error("清理锁定文件失败:",ae)}return r({message:`操作失败: ${H.message}`,type:"error"}),!1}}async function se(){if(!Z.isGitRepo)return r.warning("当前目录不是Git仓库"),!1;try{A.value=!0;const b=await(await fetch("/api/reset-head",{method:"POST"})).json();return b.success?(r({message:"已重置暂存区",type:"success"}),O(),!0):(r({message:`重置暂存区失败: ${b.error}`,type:"error"}),!1)}catch(v){return r({message:`重置暂存区失败: ${v.message}`,type:"error"}),!1}finally{A.value=!1}}async function ve(v){if(!Z.isGitRepo)return r.warning("当前目录不是Git仓库"),!1;try{A.value=!0;const H=await(await fetch("/api/reset-to-remote",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({branch:v})})).json();return H.success?(r({message:`已重置分支 ${v} 到远程状态`,type:"success"}),O(),D(),!0):(r({message:`重置分支失败: ${H.error}`,type:"error"}),!1)}catch(b){return r({message:`重置分支失败: ${b.message}`,type:"error"}),!1}finally{A.value=!1}}return Ve(()=>{const v=localStorage.getItem("zen-gitsync-auto-update");v!==null&&(R.value=v==="true"),X()}),pt(()=>{y&&(y.disconnect(),y=null)}),{log:h,status:d,statusText:j,fileList:G,isLoadingLog:J,isLoadingStatus:te,isAddingFiles:M,isResetting:A,isCommiting:F,isPushing:I,autoUpdateEnabled:R,fetchLog:D,fetchStatus:O,fetchStatusPorcelain:C,parseStatusPorcelain:L,addToStage:g,addFileToStage:W,unstageFile:N,commitChanges:ee,pushToRemote:K,addAndCommit:re,addCommitAndPush:fe,resetHead:se,resetToRemote:ve,toggleAutoUpdate:Y}}),Bt={class:"card"},jt={class:"status-header"},At={class:"header-actions"},Ot={class:"card-content"},Ut={class:"current-directory"},Ft={key:0,class:"status-box"},It={key:1,class:"file-list-container"},Pt={class:"file-group"},Mt=["onClick"],Nt={class:"file-info"},Ht={class:"file-path-container"},Wt={class:"file-name"},Jt={class:"file-directory"},Yt={class:"file-actions"},qt={key:0,class:"empty-file-group"},Zt={class:"file-group"},Xt=["onClick"],Kt={class:"file-info"},Qt={class:"file-path-container"},es={class:"file-name"},ts={class:"file-directory"},ss={class:"file-actions"},as={key:0,class:"empty-file-group"},ls={class:"file-group"},os=["onClick"],ns={class:"file-info"},is={class:"file-path-container"},rs={class:"file-name"},cs={class:"file-directory"},us={class:"file-actions"},ds={key:0,class:"empty-file-group"},fs={key:2,class:"empty-status"},ps={class:"empty-icon"},ms={class:"directory-buttons"},vs={class:"browser-current-path"},gs={key:0,class:"browser-error"},ys={class:"directory-browser"},hs={class:"browser-nav"},_s={class:"directory-items-container"},ws={class:"directory-items"},$s=["onClick"],Cs={class:"diff-content"},ks=["innerHTML"],bs={key:1,class:"no-diff"},Ss={class:"file-navigation"},Ts={class:"file-counter"},Vs=ze({__name:"GitStatus",props:{initialDirectory:{type:String,default:""}},setup(Z,{expose:y}){const R=Z,h=He(),d=we(),j=_e(()=>h.isLoadingStatus),G=f(""),J=f(""),te=f(!1),M=f(!1),F=f(-1),I=f(!1),A=f(""),X=f(!1),Y=f(!1),L=f(""),D=f([]),O=f(!1),C=f(""),g=f(R.initialDirectory||"");async function W(){try{if(!g.value){const c=await(await fetch("/api/current_directory")).json();g.value=c.directory||"未知目录"}if(!d.isGitRepo)return;await h.fetchStatus(),r({message:"Git 状态已刷新",type:"success"})}catch(_){r({message:"刷新失败: "+_.message,type:"error"})}}function N(_){if(!_)return"";const c=_.split(`
`);function z(T){return T.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;")}return c.map(T=>{const n=z(T);return T.startsWith("diff --git")?`<div class="diff-header">${n}</div>`:T.startsWith("---")?`<div class="diff-old-file">${n}</div>`:T.startsWith("+++")?`<div class="diff-new-file">${n}</div>`:T.startsWith("@@")?`<div class="diff-hunk-header">${n}</div>`:T.startsWith("+")?`<div class="diff-added">${n}</div>`:T.startsWith("-")?`<div class="diff-removed">${n}</div>`:`<div class="diff-context">${n}</div>`}).join("")}async function q(_){try{M.value=!0,G.value=_,F.value=h.fileList.findIndex(T=>T.path===_);const z=await(await fetch(`/api/diff?file=${encodeURIComponent(_)}`)).json();J.value=z.diff||"没有变更",te.value=!0}catch(c){r({message:"获取文件差异失败: "+c.message,type:"error"}),J.value="获取差异失败: "+c.message}finally{M.value=!1}}async function ee(){if(h.fileList.length===0||F.value<=0)return;const _=F.value-1,c=h.fileList[_];await q(c.path)}async function K(){if(h.fileList.length===0||F.value>=h.fileList.length-1)return;const _=F.value+1,c=h.fileList[_];await q(c.path)}function re(){A.value=g.value,I.value=!0}function fe(){C.value="",L.value=A.value||g.value,Y.value=!0,se(L.value)}async function se(_){try{O.value=!0,C.value="";let c=_;/^[A-Za-z]:$/.test(c)&&(c+="/");const z=await fetch(`/api/browse_directory?path=${encodeURIComponent(c)}`);if(z.status===403){const n=await z.json();C.value=n.error||"目录浏览功能未启用";return}if(!z.ok){const n=await z.json();C.value=n.error||"获取目录内容失败";return}const T=await z.json();T.success?(D.value=T.items,L.value=T.currentPath):C.value=T.error||"获取目录内容失败"}catch(c){C.value=`获取目录内容失败: ${c.message}`}finally{O.value=!1}}function ve(){if(/^[A-Za-z]:$/.test(L.value)||/^[A-Za-z]:[\\/]$/.test(L.value)||L.value==="/")return;let _=L.value.split(/[/\\]/);_.pop();let c=_.join("/");_.length===1&&/^[A-Za-z]:$/.test(_[0])&&(c=_[0]+"/"),c&&se(c)}function v(_){_.type==="directory"&&se(_.path)}function b(){A.value=L.value,Y.value=!1}async function H(){if(!A.value){r.warning("目录路径不能为空");return}try{X.value=!0;const c=await(await fetch("/api/change_directory",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({path:A.value})})).json();c.success?(r.success("已切换工作目录"),g.value=c.directory,I.value=!1,d.isGitRepo=c.isGitRepo,c.isGitRepo?(await Promise.all([d.getCurrentBranch(),d.getAllBranches(),d.getUserInfo()]),await W()):(r.warning("当前目录不是一个Git仓库"),d.$reset())):r.error(c.error||"切换目录失败")}catch(_){r.error(`切换目录失败: ${_.message}`)}finally{X.value=!1}}function ae(_){q(_.path)}async function ce(_){await h.addFileToStage(_)}async function le(_){await h.unstageFile(_)}async function S(){await W()}async function o(_){try{await ot.confirm(`确定要撤回文件 "${_}" 的所有修改吗？此操作无法撤销。`,"撤回修改",{confirmButtonText:"确定",cancelButtonText:"取消",type:"warning"});const z=await(await fetch("/api/revert_file",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({filePath:_})})).json();z.success?(r.success("已撤回文件修改"),await W()):r.error(z.error?`撤回失败: ${z.error}`:"撤回文件修改失败，请重试")}catch(c){if(c==="cancel"||c.message==="cancel")return;const z=c.message||"未知错误";z!=="undefined"?r.error(`撤回文件修改失败: ${z}`):r.error("撤回文件修改失败，请重试")}}function U(_){const c=_.split("/");return c[c.length-1]}function x(_){const c=_.split("/");return c.length<=1?"":c.slice(0,-1).join("/")}return Ve(()=>{W()}),y({refreshStatus:S}),(_,c)=>{const z=et,T=Ie,n=ge,i=Pe,$=Be,P=st,k=tt,ne=Ee,pe=at;return m(),w("div",Bt,[e("div",jt,[c[5]||(c[5]=e("h2",null,"Git 状态",-1)),e("div",At,[t(T,{content:l(h).autoUpdateEnabled?"禁用自动更新":"启用自动更新",placement:"top","hide-after":1e3},{default:a(()=>[t(z,{modelValue:l(h).autoUpdateEnabled,"onUpdate:modelValue":c[0]||(c[0]=u=>l(h).autoUpdateEnabled=u),onChange:l(h).toggleAutoUpdate,style:{"--el-switch-on-color":"#67C23A","--el-switch-off-color":"#909399","margin-right":"10px"},"inline-prompt":"","active-icon":l(vt),"inactive-icon":l(Ze),class:"auto-update-switch"},null,8,["modelValue","onChange","active-icon","inactive-icon"])]),_:1},8,["content"]),t(n,{type:"primary",icon:l(gt),circle:"",size:"small",onClick:S,loading:j.value},null,8,["icon","loading"])])]),e("div",Ot,[e("div",Ut,[t(i,null,{default:a(()=>[t(l(Ae))]),_:1}),e("span",null,B(g.value),1),t(n,{type:"primary",size:"small",onClick:re,plain:""},{default:a(()=>c[6]||(c[6]=[V(" 切换目录 ")])),_:1})]),l(d).isGitRepo?oe("",!0):(m(),w("div",Ft," 当前目录不是一个Git仓库 ")),l(h).fileList.length?(m(),w("div",It,[e("div",Pt,[c[8]||(c[8]=e("div",{class:"file-group-header"},"已暂存的更改",-1)),e("div",{class:ye(["file-list",{"empty-file-container":!l(h).fileList.some(u=>u.type==="added")}])},[(m(!0),w(de,null,me(l(h).fileList.filter(u=>u.type==="added"),u=>(m(),w("div",{key:u.path,class:"file-item",onClick:p=>ae(u)},[e("div",Nt,[e("div",Ht,[e("span",Wt,B(U(u.path)),1),e("span",Jt,B(x(u.path)),1)])]),e("div",Yt,[t(T,{content:"取消暂存",placement:"top","hide-after":1e3},{default:a(()=>[t(n,{type:"warning",size:"small",circle:"",onClick:be(p=>le(u.path),["stop"])},{default:a(()=>c[7]||(c[7]=[V("-")])),_:2},1032,["onClick"])]),_:2},1024)])],8,Mt))),128)),l(h).fileList.some(u=>u.type==="added")?oe("",!0):(m(),w("div",qt," 没有已暂存的文件 "))],2)]),e("div",Zt,[c[10]||(c[10]=e("div",{class:"file-group-header"},"未暂存的更改",-1)),e("div",{class:ye(["file-list",{"empty-file-container":!l(h).fileList.some(u=>u.type==="modified"||u.type==="deleted")}])},[(m(!0),w(de,null,me(l(h).fileList.filter(u=>u.type==="modified"||u.type==="deleted"),u=>(m(),w("div",{key:u.path,class:"file-item",onClick:p=>ae(u)},[e("div",Kt,[e("div",{class:ye(["file-status-indicator",u.type])},null,2),e("div",Qt,[e("span",es,B(U(u.path)),1),e("span",ts,B(x(u.path)),1)])]),e("div",ss,[t(T,{content:"添加到暂存区",placement:"top","hide-after":1e3},{default:a(()=>[t(n,{type:"success",size:"small",circle:"",onClick:be(p=>ce(u.path),["stop"])},{default:a(()=>c[9]||(c[9]=[V("+")])),_:2},1032,["onClick"])]),_:2},1024),t(T,{content:"撤回修改",placement:"top","hide-after":1e3},{default:a(()=>[t(n,{type:"danger",size:"small",icon:l(lt),circle:"",onClick:be(p=>o(u.path),["stop"])},null,8,["icon","onClick"])]),_:2},1024)])],8,Xt))),128)),l(h).fileList.some(u=>u.type==="modified"||u.type==="deleted")?oe("",!0):(m(),w("div",as," 没有未暂存的更改 "))],2)]),e("div",ls,[c[13]||(c[13]=e("div",{class:"file-group-header"},"未跟踪的文件",-1)),e("div",{class:ye(["file-list",{"empty-file-container":!l(h).fileList.some(u=>u.type==="untracked")}])},[(m(!0),w(de,null,me(l(h).fileList.filter(u=>u.type==="untracked"),u=>(m(),w("div",{key:u.path,class:"file-item",onClick:p=>ae(u)},[e("div",ns,[c[11]||(c[11]=e("div",{class:"file-status-indicator untracked"},null,-1)),e("div",is,[e("span",rs,B(U(u.path)),1),e("span",cs,B(x(u.path)),1)])]),e("div",us,[t(T,{content:"添加到暂存区",placement:"top","hide-after":1e3},{default:a(()=>[t(n,{type:"success",size:"small",circle:"",onClick:be(p=>ce(u.path),["stop"])},{default:a(()=>c[12]||(c[12]=[V("+")])),_:2},1032,["onClick"])]),_:2},1024),t(T,{content:"删除文件",placement:"top","hide-after":1e3},{default:a(()=>[t(n,{type:"danger",size:"small",icon:l(Ze),circle:"",onClick:be(p=>o(u.path),["stop"])},null,8,["icon","onClick"])]),_:2},1024)])],8,os))),128)),l(h).fileList.some(u=>u.type==="untracked")?oe("",!0):(m(),w("div",ds," 没有未跟踪的文件 "))],2)])])):l(d).isGitRepo?(m(),w("div",fs,[e("div",ps,[t(i,null,{default:a(()=>[t(l(Ge))]),_:1})]),c[14]||(c[14]=e("div",{class:"empty-text"},"没有检测到任何更改",-1))])):oe("",!0)]),t(ne,{modelValue:I.value,"onUpdate:modelValue":c[2]||(c[2]=u=>I.value=u),title:"切换工作目录",width:"500px"},{default:a(()=>[t(k,null,{default:a(()=>[t(P,{label:"目录路径"},{default:a(()=>[t($,{modelValue:A.value,"onUpdate:modelValue":c[1]||(c[1]=u=>A.value=u),placeholder:"请输入目录路径",clearable:""},null,8,["modelValue"]),e("div",ms,[t(n,{onClick:fe,type:"primary",plain:"",class:"no-padding-left"},{default:a(()=>[t(i,null,{default:a(()=>[t(l(Ae))]),_:1}),c[15]||(c[15]=V(" 浏览 "))]),_:1}),t(n,{onClick:H,loading:X.value,type:"primary"},{default:a(()=>c[16]||(c[16]=[V(" 切换 ")])),_:1},8,["loading"])])]),_:1})]),_:1})]),_:1},8,["modelValue"]),t(ne,{modelValue:Y.value,"onUpdate:modelValue":c[3]||(c[3]=u=>Y.value=u),title:"浏览目录",width:"600px"},{default:a(()=>[e("div",vs,[e("span",null,"当前路径: "+B(L.value),1)]),C.value?(m(),w("div",gs,B(C.value),1)):oe("",!0),De((m(),w("div",ys,[e("div",hs,[t(n,{onClick:ve,disabled:!L.value||O.value,size:"small",class:"no-padding-left"},{default:a(()=>[t(i,null,{default:a(()=>[t(l(yt))]),_:1}),c[17]||(c[17]=V(" 上级目录 "))]),_:1},8,["disabled"]),t(n,{onClick:b,type:"primary",size:"small",class:"no-padding-left"},{default:a(()=>c[18]||(c[18]=[V(" 选择当前目录 ")])),_:1})]),e("div",_s,[e("ul",ws,[(m(!0),w(de,null,me(D.value,u=>(m(),w("li",{key:u.path,class:ye(["directory-item",u.type]),onClick:p=>v(u)},[u.type==="directory"?(m(),Q(i,{key:0},{default:a(()=>[t(l(Ae))]),_:1})):(m(),Q(i,{key:1},{default:a(()=>[t(l(Ge))]),_:1})),e("span",null,B(u.name),1)],10,$s))),128))])])])),[[pe,O.value]])]),_:1},8,["modelValue"]),t(ne,{modelValue:te.value,"onUpdate:modelValue":c[4]||(c[4]=u=>te.value=u),title:`文件差异: ${G.value}`,width:"80%","destroy-on-close":"",class:"diff-dialog"},{default:a(()=>[De((m(),w("div",Cs,[J.value?(m(),w("div",{key:0,innerHTML:N(J.value),class:"diff-formatted"},null,8,ks)):(m(),w("div",bs,"该文件没有差异或是新文件"))])),[[pe,M.value]]),e("div",Ss,[t(n,{icon:l(ht),onClick:ee,disabled:F.value<=0||l(h).fileList.length===0,circle:""},null,8,["icon","disabled"]),e("span",Ts,B(F.value+1)+" / "+B(l(h).fileList.length),1),t(n,{icon:l(_t),onClick:K,disabled:F.value>=l(h).fileList.length-1||l(h).fileList.length===0,circle:""},null,8,["icon","disabled"])])]),_:1},8,["modelValue","title"])])}}}),je=(Z,y)=>{const R=Z.__vccOpts||Z;for(const[h,d]of y)R[h]=d;return R},Ls=je(Vs,[["__scopeId","data-v-ee482540"]]),Rs={class:"card-content"},Gs={class:"layout-container"},Ds={key:0,class:"git-config-warning"},xs={class:"commit-section"},zs={class:"commit-options"},Es={class:"options-row"},Bs={class:"commit-mode-toggle"},js={class:"no-verify-toggle"},As={key:0,class:"commit-form"},Os={key:1,class:"standard-commit-form"},Us={class:"standard-commit-header"},Fs={class:"scope-container"},Is={class:"description-container"},Ps={class:"preview-section"},Ms={class:"preview-content"},Ns={class:"preview-content code-command"},Hs={class:"actions-section"},Ws={class:"action-groups"},Js={class:"action-group"},Ys={class:"group-buttons"},qs={class:"action-group"},Zs={class:"group-buttons"},Xs={class:"action-group"},Ks={class:"group-buttons"},Qs={class:"template-container"},ea={class:"template-form"},ta={class:"template-form-buttons"},sa={class:"template-list"},aa={class:"template-content"},la={class:"template-actions"},oa={class:"template-container"},na={class:"template-form"},ia={class:"template-form-buttons"},ra={class:"template-list"},ca={class:"template-content"},ua={class:"template-actions"},da=ze({__name:"CommitForm",setup(Z){const y=He(),R=we(),h=f(""),d=f(!1),j=f("输入提交信息..."),G=f(""),J=f(!1),te=f("feat"),M=f(""),F=f(""),I=f(""),A=f(""),X=f([]),Y=f(!1),L=f(""),D=f(!1),O=f(""),C=f(-1),g=f([]),W=f(!1),N=f(""),q=f(!1),ee=f(""),K=f(-1),re=f(!1),fe=[{value:"feat",label:"feat: 新功能"},{value:"fix",label:"fix: 修复bug"},{value:"docs",label:"docs: 文档修改"},{value:"style",label:"style: 样式修改"},{value:"refactor",label:"refactor: 代码重构"},{value:"test",label:"test: 测试代码"},{value:"chore",label:"chore: 构建/工具修改"}];Fe(J,p=>{localStorage.setItem("zen-gitsync-standard-commit",p.toString())}),Fe(re,p=>{localStorage.setItem("zen-gitsync-skip-hooks",p.toString())});const se=_e(()=>{if(!J.value)return h.value||G.value;let p=`${te.value||""}`;return M.value&&(p+=`(${M.value})`),p+=`: ${F.value}`,I.value&&(p+=`

${I.value}`),A.value&&(p+=`

${A.value}`),p}),ve=_e(()=>{let p=`git commit -m "${se.value}"`;return re.value&&(p+=" --no-verify"),p});async function v(){try{const s=await(await fetch("/api/config/getConfig")).json();j.value=`输入提交信息 (默认: ${s.defaultCommitMessage})`,G.value=s.defaultCommitMessage||"",s.descriptionTemplates&&Array.isArray(s.descriptionTemplates)&&(X.value=s.descriptionTemplates),s.scopeTemplates&&Array.isArray(s.scopeTemplates)&&(g.value=s.scopeTemplates)}catch(p){console.error("加载配置失败:",p)}}async function b(){if(!L.value.trim()){r({message:"请输入模板内容",type:"warning"});return}try{if(D.value)await H();else{if(X.value.includes(L.value)){r({message:"该模板已存在",type:"warning"});return}X.value.push(L.value);const s=await(await fetch("/api/config/save-template",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({template:L.value,type:"description"})})).json();s.success?(r({message:"模板保存成功!",type:"success"}),L.value=""):r({message:"模板保存失败: "+s.error,type:"error"})}}catch(p){r({message:"模板保存失败: "+p.message,type:"error"})}}async function H(){try{if(C.value>=0){const p=O.value,s=L.value;X.value[C.value]=s;const ue=await(await fetch("/api/config/update-template",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({oldTemplate:p,newTemplate:s,type:"description"})})).json();ue.success?(r({message:"模板更新成功!",type:"success"}),D.value=!1,O.value="",C.value=-1,L.value=""):r({message:"模板更新失败: "+ue.error,type:"error"})}}catch(p){r({message:"模板更新失败: "+p.message,type:"error"})}}function ae(p,s){D.value=!0,O.value=p,C.value=s,L.value=p}function ce(){D.value=!1,O.value="",C.value=-1,L.value=""}async function le(){if(!N.value.trim()){r({message:"请输入模板内容",type:"warning"});return}try{if(q.value)await S();else{if(g.value.includes(N.value)){r({message:"该模板已存在",type:"warning"});return}g.value.push(N.value);const s=await(await fetch("/api/config/save-template",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({template:N.value,type:"scope"})})).json();s.success?(r({message:"作用域模板保存成功!",type:"success"}),N.value=""):r({message:"作用域模板保存失败: "+s.error,type:"error"})}}catch(p){r({message:"作用域模板保存失败: "+p.message,type:"error"})}}async function S(){try{if(K.value>=0){const p=ee.value,s=N.value;g.value[K.value]=s;const ue=await(await fetch("/api/config/update-template",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({oldTemplate:p,newTemplate:s,type:"scope"})})).json();ue.success?(r({message:"作用域模板更新成功!",type:"success"}),q.value=!1,ee.value="",K.value=-1,N.value=""):r({message:"作用域模板更新失败: "+ue.error,type:"error"})}}catch(p){r({message:"作用域模板更新失败: "+p.message,type:"error"})}}function o(p,s){q.value=!0,ee.value=p,K.value=s,N.value=p}function U(){q.value=!1,ee.value="",K.value=-1,N.value=""}async function x(p){try{const s=X.value.indexOf(p);s!==-1&&X.value.splice(s,1);const ue=await(await fetch("/api/config/delete-template",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({template:p,type:"description"})})).json();ue.success?r({message:"模板删除成功!",type:"success"}):r({message:"模板删除失败: "+ue.error,type:"error"})}catch(s){r({message:"模板删除失败: "+s.message,type:"error"})}}async function _(p){try{const s=g.value.indexOf(p);s!==-1&&g.value.splice(s,1);const ue=await(await fetch("/api/config/delete-template",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({template:p,type:"scope"})})).json();ue.success?r({message:"作用域模板删除成功!",type:"success"}):r({message:"作用域模板删除失败: "+ue.error,type:"error"})}catch(s){r({message:"作用域模板删除失败: "+s.message,type:"error"})}}function c(p){F.value=p,Y.value=!1}function z(p){M.value=p,W.value=!1}function T(){Y.value=!0}function n(){W.value=!0}async function i(){try{await y.addToStage()&&y.fetchStatus()}catch(p){r({message:`添加文件失败: ${p.message}`,type:"error"})}}async function $(){if(!se.value.trim()){r({message:"提交信息不能为空",type:"warning"});return}try{await y.commitChanges(se.value,re.value)&&(u(),y.fetchStatus(),y.fetchLog())}catch(p){r({message:`提交失败: ${p.message}`,type:"error"})}}async function P(){try{d.value=!0,await y.pushToRemote()&&(R.getCurrentBranch(),y.fetchLog())}catch(p){r({message:`推送失败: ${p.message}`,type:"error"})}finally{d.value=!1}}async function k(){if(!se.value.trim()){r({message:"提交信息不能为空",type:"warning"});return}try{await y.addAndCommit(se.value,re.value),u(),y.fetchStatus(),y.fetchLog()}catch(p){r({message:`暂存并提交失败: ${p.message}`,type:"error"})}}async function ne(){if(!se.value.trim()){r({message:"提交信息不能为空",type:"warning"});return}try{await y.addCommitAndPush(se.value,re.value),u(),R.getCurrentBranch(),y.fetchLog()}catch(p){r({message:`暂存、提交并推送失败: ${p.message}`,type:"error"})}finally{}}async function pe(){try{await ot.confirm(`确定要重置当前分支 "${R.currentBranch}" 到远程状态吗？这将丢失所有未推送的提交和本地更改。`,"重置到远程分支",{confirmButtonText:"确定",cancelButtonText:"取消",type:"warning"}),await y.resetToRemote(R.currentBranch)&&(y.fetchStatus(),y.fetchLog())}catch(p){p!=="cancel"&&r({message:`重置到远程分支失败: ${p.message}`,type:"error"})}}function u(){h.value="",F.value="",I.value="",A.value=""}return Ve(()=>{v();const p=localStorage.getItem("zen-gitsync-standard-commit");p!==null&&(J.value=p==="true");const s=localStorage.getItem("zen-gitsync-skip-hooks");s!==null&&(re.value=s==="true")}),(p,s)=>{const $e=nt,ue=et,ut=Ie,he=Be,dt=Me,ft=Ne,ie=ge,We=it,Je=wt,Ye=rt,qe=Ee;return m(),w("div",{class:ye(["card",{"is-pushing":l(y).isPushing||d.value}])},[s[35]||(s[35]=e("div",{class:"card-header"},[e("h2",null,"提交更改")],-1)),e("div",Rs,[e("div",Gs,[l(R).userName===""||l(R).userEmail===""?(m(),w("div",Ds,[t($e,{title:"Git用户信息未配置",type:"warning",closable:!1,"show-icon":""},{default:a(()=>s[12]||(s[12]=[e("p",null,"您需要配置Git用户名和邮箱才能提交代码。请使用以下命令配置：",-1),e("pre",{class:"config-command"},`git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"`,-1)])),_:1})])):(m(),w(de,{key:1},[e("div",xs,[e("div",zs,[e("div",Es,[e("div",Bs,[t(ue,{modelValue:J.value,"onUpdate:modelValue":s[0]||(s[0]=E=>J.value=E),"active-text":"标准化提交","inactive-text":"普通提交"},null,8,["modelValue"])]),e("div",js,[t(ut,{content:"跳过 Git 钩子检查 (--no-verify)",placement:"top"},{default:a(()=>[t(ue,{modelValue:re.value,"onUpdate:modelValue":s[1]||(s[1]=E=>re.value=E),"active-text":"跳过钩子 (--no-verify)"},null,8,["modelValue"])]),_:1})])])]),J.value?(m(),w("div",Os,[e("div",Us,[t(ft,{modelValue:te.value,"onUpdate:modelValue":s[3]||(s[3]=E=>te.value=E),placeholder:"提交类型",class:"type-select",clearable:""},{default:a(()=>[(m(),w(de,null,me(fe,E=>t(dt,{key:E.value,label:E.label,value:E.value},null,8,["label","value"])),64))]),_:1},8,["modelValue"]),e("div",Fs,[t(he,{modelValue:M.value,"onUpdate:modelValue":s[4]||(s[4]=E=>M.value=E),placeholder:"作用域（可选）",class:"scope-input",clearable:""},null,8,["modelValue"]),t(ie,{type:"primary",icon:l(xe),circle:"",size:"small",class:"settings-button",onClick:n},null,8,["icon"])]),e("div",Is,[t(he,{modelValue:F.value,"onUpdate:modelValue":s[5]||(s[5]=E=>F.value=E),placeholder:"简短描述（必填）",class:"description-input",clearable:""},null,8,["modelValue"]),t(ie,{type:"primary",icon:l(xe),circle:"",size:"small",class:"settings-button",onClick:T},null,8,["icon"])])]),t(he,{modelValue:I.value,"onUpdate:modelValue":s[6]||(s[6]=E=>I.value=E),type:"textarea",rows:4,placeholder:"正文（可选）：详细描述本次提交的内容和原因",class:"body-input",clearable:""},null,8,["modelValue"]),t(he,{modelValue:A.value,"onUpdate:modelValue":s[7]||(s[7]=E=>A.value=E),placeholder:"页脚（可选）：如 Closes #123",class:"footer-input",clearable:""},null,8,["modelValue"]),e("div",Ps,[s[13]||(s[13]=e("div",{class:"preview-title"},"提交信息预览：",-1)),e("pre",Ms,B(se.value),1),s[14]||(s[14]=e("div",{class:"preview-title",style:{"margin-top":"10px"}},"Git命令预览：",-1)),e("pre",Ns,B(ve.value),1)])])):(m(),w("div",As,[t(he,{modelValue:h.value,"onUpdate:modelValue":s[2]||(s[2]=E=>h.value=E),placeholder:j.value,clearable:""},null,8,["modelValue","placeholder"])]))]),e("div",Hs,[s[24]||(s[24]=e("h3",null,"Git 操作",-1)),e("div",Ws,[e("div",Js,[s[18]||(s[18]=e("div",{class:"group-title"},"基础操作",-1)),e("div",Ys,[t(ie,{type:"primary",onClick:i,loading:l(y).isAddingFiles,class:"action-button"},{default:a(()=>s[15]||(s[15]=[V(" 暂存更改 "),e("span",{class:"command-text"},"git add .",-1)])),_:1},8,["loading"]),t(ie,{type:"primary",onClick:$,loading:l(y).isLoadingStatus,class:"action-button"},{default:a(()=>s[16]||(s[16]=[V(" 提交 "),e("span",{class:"command-text"},"git commit",-1)])),_:1},8,["loading"]),t(ie,{type:"success",onClick:P,loading:l(y).isPushing,class:"action-button push-button"},{default:a(()=>s[17]||(s[17]=[V(" 推送 "),e("span",{class:"command-text"},"git push",-1)])),_:1},8,["loading"])])]),e("div",qs,[s[21]||(s[21]=e("div",{class:"group-title"},"组合操作",-1)),e("div",Zs,[t(ie,{type:"warning",onClick:k,loading:l(y).isAddingFiles||l(y).isCommiting,class:"action-button"},{default:a(()=>s[19]||(s[19]=[V(" 暂存并提交 "),e("span",{class:"command-text"},"git add + commit",-1)])),_:1},8,["loading"]),t(ie,{type:"danger",onClick:ne,loading:l(y).isAddingFiles||l(y).isCommiting||l(y).isPushing,class:"action-button"},{default:a(()=>s[20]||(s[20]=[V(" 一键推送 "),e("span",{class:"command-text command-text-long"},"git add + commit + push",-1)])),_:1},8,["loading"])])]),e("div",Xs,[s[23]||(s[23]=e("div",{class:"group-title"},"重置操作",-1)),e("div",Ks,[t(ie,{type:"info",onClick:pe,loading:l(y).isResetting,class:"action-button reset-button"},{default:a(()=>s[22]||(s[22]=[V(" 重置到远程 "),e("span",{class:"command-text command-text-long"},"git reset --hard origin/branch",-1)])),_:1},8,["loading"])])])])])],64))]),t(qe,{title:"简短描述模板设置",modelValue:Y.value,"onUpdate:modelValue":s[9]||(s[9]=E=>Y.value=E),width:"80vw",style:{height:"80vh"}},{default:a(()=>[e("div",Qs,[e("div",ea,[t(he,{modelValue:L.value,"onUpdate:modelValue":s[8]||(s[8]=E=>L.value=E),placeholder:D.value?"编辑模板内容":"输入新模板内容",class:"template-input",clearable:""},null,8,["modelValue","placeholder"]),e("div",ta,[D.value?(m(),Q(ie,{key:0,onClick:ce},{default:a(()=>s[25]||(s[25]=[V("取消")])),_:1})):oe("",!0),t(ie,{type:"primary",onClick:b,disabled:!L.value.trim()},{default:a(()=>[V(B(D.value?"更新模板":"添加模板"),1)]),_:1},8,["disabled"])])]),e("div",sa,[s[29]||(s[29]=e("h3",null,"已保存模板",-1)),X.value.length===0?(m(),Q(We,{key:0,description:"暂无保存的模板"})):oe("",!0),(m(!0),w(de,null,me(X.value,(E,Ce)=>(m(),Q(Ye,{key:Ce,class:"template-item"},{default:a(()=>[t(Je,{justify:"space-between",align:"middle",style:{width:"100%"}},{default:a(()=>[e("div",aa,B(E),1),e("div",la,[t(ie,{type:"primary",size:"small",onClick:ke=>c(E)},{default:a(()=>s[26]||(s[26]=[V("使用")])),_:2},1032,["onClick"]),t(ie,{type:"warning",size:"small",icon:l(Xe),onClick:ke=>ae(E,Ce)},{default:a(()=>s[27]||(s[27]=[V("编辑")])),_:2},1032,["icon","onClick"]),t(ie,{type:"danger",size:"small",onClick:ke=>x(E)},{default:a(()=>s[28]||(s[28]=[V("删除")])),_:2},1032,["onClick"])])]),_:2},1024)]),_:2},1024))),128))])])]),_:1},8,["modelValue"]),t(qe,{title:"作用域模板设置",modelValue:W.value,"onUpdate:modelValue":s[11]||(s[11]=E=>W.value=E),width:"80%",style:{height:"80vh"}},{default:a(()=>[e("div",oa,[e("div",na,[t(he,{modelValue:N.value,"onUpdate:modelValue":s[10]||(s[10]=E=>N.value=E),placeholder:q.value?"编辑作用域模板内容":"输入新作用域模板",class:"template-input",clearable:""},null,8,["modelValue","placeholder"]),e("div",ia,[q.value?(m(),Q(ie,{key:0,onClick:U},{default:a(()=>s[30]||(s[30]=[V("取消")])),_:1})):oe("",!0),t(ie,{type:"primary",onClick:le,disabled:!N.value.trim()},{default:a(()=>[V(B(q.value?"更新模板":"添加模板"),1)]),_:1},8,["disabled"])])]),e("div",ra,[s[34]||(s[34]=e("h3",null,"已保存作用域",-1)),g.value.length===0?(m(),Q(We,{key:0,description:"暂无保存的作用域"})):oe("",!0),(m(!0),w(de,null,me(g.value,(E,Ce)=>(m(),Q(Ye,{key:Ce,class:"template-item"},{default:a(()=>[t(Je,{justify:"space-between",align:"middle",style:{width:"100%"}},{default:a(()=>[e("div",ca,B(E),1),e("div",ua,[t(ie,{type:"primary",size:"small",onClick:ke=>z(E)},{default:a(()=>s[31]||(s[31]=[V("使用")])),_:2},1032,["onClick"]),t(ie,{type:"warning",size:"small",icon:l(Xe),onClick:ke=>o(E,Ce)},{default:a(()=>s[32]||(s[32]=[V("编辑")])),_:2},1032,["icon","onClick"]),t(ie,{type:"danger",size:"small",onClick:ke=>_(E)},{default:a(()=>s[33]||(s[33]=[V("删除")])),_:2},1032,["onClick"])])]),_:2},1024)]),_:2},1024))),128))])])]),_:1},8,["modelValue"])])],2)}}}),fa=je(da,[["__scopeId","data-v-1d6e6f1a"]]),pa={class:"card"},ma={key:0,class:"refresh-notification"},va={class:"log-header"},ga={class:"log-actions"},ya={class:"content-area"},ha={key:0},_a={key:1},wa={key:0,class:"graph-view"},$a={key:0,class:"commit-count"},Ca={class:"graph-controls"},ka={class:"zoom-controls"},ba={class:"scale-info"},Sa={key:1},Ta={class:"history-controls"},Va={class:"history-stats"},La={class:"filter-actions"},Ra={key:0,class:"filter-panel"},Ga={class:"filter-form"},Da={class:"filter-item"},xa={class:"filter-item"},za={class:"filter-item"},Ea={class:"filter-actions"},Ba=["onClick"],ja={class:"author-name"},Aa={key:0,class:"branch-container"},Oa={class:"commit-detail-container"},Ua={key:0,class:"commit-info"},Fa={class:"commit-info-header"},Ia={class:"info-item"},Pa={class:"item-value"},Ma={class:"info-item"},Na={class:"item-value"},Ha={class:"info-item"},Wa={class:"item-value"},Ja={class:"commit-message-container"},Ya=["innerHTML"],qa={class:"commit-files-diff"},Za={class:"files-list"},Xa={key:1},Ka=["onClick"],Qa={class:"file-diff"},el={key:0},tl={key:1},sl=["innerHTML"],Te=.5,Re=1.5,Ue=.1,al=ze({__name:"LogList",setup(Z,{expose:y}){const R=He(),h=we();let d=[];const j=f(d),G=f(""),J=f(!1),te=_e(()=>R.isLoadingLog||J.value),M=f(!1),F=f(0),I=f(!1),A=f(null),X=f(!1),Y=f(null),L=f([]),D=f(""),O=f(!1),C=f(""),g=f(1),W=f(!1),N=f(!1),q=f(""),ee=f(""),K=f(null),re=_e(()=>{const n=new Set;return j.value.forEach(i=>{i.author&&n.add(i.author)}),Array.from(n).sort()}),fe=_e(()=>!q.value&&!ee.value&&!K.value?j.value:j.value.filter(n=>{if(q.value&&n.author!==q.value||ee.value&&!n.message.toLowerCase().includes(ee.value.toLowerCase()))return!1;if(K.value&&K.value.length===2){const i=new Date(n.date),[$,P]=K.value,k=new Date($),ne=new Date(P);if(k.setHours(0,0,0,0),ne.setHours(23,59,59,999),i<k||i>ne)return!1}return!0}));function se(){q.value="",ee.value="",K.value=null}async function ve(n=!1){if(!we().isGitRepo){G.value="当前目录不是Git仓库";return}try{M.value=n,J.value=!0;const $=n?"/api/log?all=true&graph=true":"/api/log?graph=true";console.log(`加载日志数据: ${$}`);const k=await(await fetch($)).json();if(d.length=0,Array.isArray(k))console.log(`日志加载完成: 共${k.length}条记录`),k.forEach(ne=>d.push(ne)),F.value=k.length;else if(k.log&&Array.isArray(k.log))console.log(`日志加载完成: 共${k.log.length}条记录`),k.log.forEach(ne=>d.push(ne)),F.value=k.log.length;else{console.error("未知的日志数据格式:",k),G.value="日志数据格式错误";return}j.value=[...d],console.log(`logsData长度: ${d.length}`),W.value=!0,setTimeout(()=>{W.value=!1},2e3),I.value&&setTimeout(v,0),G.value=""}catch($){G.value="加载提交历史失败: "+($ instanceof Error?$.message:String($)),console.error("加载日志失败:",$)}finally{J.value=!1}}async function v(){if(console.log(`开始渲染图表...数据长度: ${d.length}`),!A.value){console.error("图表容器未找到");return}if(d.length===0){console.error("没有日志数据可渲染");return}try{A.value.innerHTML="",console.log(`创建gitgraph实例，分支: ${h.currentBranch||"main"}`);const n=Dt(A.value,{orientation:"vertical-reverse",template:"metro",author:"提交者 <committer@example.com>"}),i={},$=n.branch(h.currentBranch||"main");i[h.currentBranch||"main"]=$,console.log(`开始创建提交图...共${d.length}条提交`),d.forEach((P,k)=>{let ne=$;if(P.branch){const pe=ae(P.branch.split(",")[0]);i[pe]||(i[pe]=n.branch(pe)),ne=i[pe]}ne.commit({hash:P.hash,subject:P.message,author:`${P.author} <${P.email}>`}),k%10===0&&console.log(`已渲染 ${k+1}/${d.length} 个提交`)}),console.log("图表渲染完成"),setTimeout(()=>{x()},100)}catch(n){console.error("渲染图表失败:",n),G.value="渲染图表失败: "+(n instanceof Error?n.message:String(n))}}function b(){I.value=!I.value,I.value&&d.length>0&&setTimeout(v,0)}function H(){ve(!M.value)}function ae(n){return n.includes("HEAD -> ")?n.replace("HEAD -> ",""):n.includes("origin/")?n:n.trim()}function ce(n){return n.includes("HEAD")?"success":n.includes("origin/")?"warning":"info"}Ve(()=>{h.isGitRepo?R.log.length>0?(console.log("使用已加载的日志数据"),d.length=0,R.log.forEach(n=>d.push(n)),F.value=R.log.length,I.value&&setTimeout(()=>{console.log(`准备渲染图表，数据长度: ${d.length}`),v()},100)):(console.log("初始加载日志数据"),ve()):G.value="当前目录不是Git仓库"});const le=()=>{if(!h.isGitRepo){G.value="当前目录不是Git仓库";return}ve(M.value)};Fe(()=>R.log,n=>{console.log("监听到gitLogStore.log变化，更新图表数据"),d.length=0,n.forEach(i=>d.push(i)),F.value=n.length;try{j.value=[...d]}catch(i){console.warn("无法更新logs.value:",i)}console.log(`数据更新完成，准备渲染图表(${d.length}条记录)`),I.value&&d.length>0&&setTimeout(v,0)}),y({refreshLog:le});function S(){g.value<Re&&(g.value=Math.min(Re,g.value+Ue),U())}function o(){g.value>Te&&(g.value=Math.max(Te,g.value-Ue),U())}function U(){if(!A.value)return;const n=A.value.querySelector("svg");n&&(n.style.transform=`scale(${g.value})`,n.style.transformOrigin="top left")}function x(){if(!A.value)return;const n=A.value.querySelector("svg");if(!n)return;const i=n.getBoundingClientRect().width/g.value,$=A.value.clientWidth;i>$?g.value=Math.max(Te,$/i):g.value=1,U()}async function _(n){Y.value=n,X.value=!0,O.value=!0,L.value=[],D.value="",C.value="",console.log("提交详情对象:",JSON.stringify(n,null,2)),console.log("哈希值类型和长度:",typeof n.hash,n.hash?n.hash.length:0),console.log("提交信息类型和长度:",typeof n.message,n.message?n.message.length:0),console.log("提交分支:",n.branch);try{if(console.log(`获取提交详情: ${n.hash}`),!n.hash||n.hash.length<7){console.error("无效的提交哈希值:",n.hash),D.value="无效的提交哈希值",O.value=!1;return}const i=await fetch(`/api/commit-files?hash=${n.hash}`);console.log("API响应状态: ",i.status);const $=await i.json();console.log("文件列表数据: ",$),$.success&&Array.isArray($.files)?(L.value=$.files,L.value.length>0?await c(n.hash,L.value[0]):(console.log("没有找到变更文件"),D.value="该提交没有变更文件")):(console.error("获取提交文件列表失败:",$.error||"未知错误"),D.value=`获取文件列表失败: ${$.error||"未知错误"}`)}catch(i){console.error("获取提交详情失败:",i),D.value=`获取提交详情失败: ${i.message}`}finally{O.value=!1}}async function c(n,i){O.value=!0,C.value=i;try{console.log(`获取文件差异: hash=${n}, file=${i}`);const $=await fetch(`/api/commit-file-diff?hash=${n}&file=${encodeURIComponent(i)}`);console.log("差异API响应状态: ",$.status);const P=await $.json();console.log("差异数据: ",P.success,typeof P.diff),P.success?D.value=P.diff||"没有变更内容":(console.error("获取差异失败: ",P.error),D.value=`获取差异失败: ${P.error||"未知错误"}`)}catch($){console.error("获取文件差异失败:",$),D.value=`获取差异失败: ${$.message}`}finally{O.value=!1}}function z(n){if(!n)return"";const i=n.split(`
`);function $(P){return P.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;")}return i.map(P=>{const k=$(P);return P.startsWith("diff --git")?`<div class="diff-header">${k}</div>`:P.startsWith("---")?`<div class="diff-old-file">${k}</div>`:P.startsWith("+++")?`<div class="diff-new-file">${k}</div>`:P.startsWith("@@")?`<div class="diff-hunk-header">${k}</div>`:P.startsWith("+")?`<div class="diff-added">${k}</div>`:P.startsWith("-")?`<div class="diff-removed">${k}</div>`:`<div class="diff-context">${k}</div>`}).join("")}function T(n){return n?(console.log("格式化前的提交信息:",n),console.log("提交信息中的换行符数量:",(n.match(/\n/g)||[]).length),n.trim()):"(无提交信息)"}return(n,i)=>{var pe;const $=Pe,P=Ie,k=it,ne=at;return m(),w("div",pa,[W.value?(m(),w("div",ma," 提交历史已刷新 ")):oe("",!0),e("div",va,[i[7]||(i[7]=e("h2",null,"提交历史",-1)),e("div",ga,[t(l(ge),{type:"primary",size:"small",onClick:b},{icon:a(()=>[t($,null,{default:a(()=>[(m(),Q(Ke(I.value?l(Ge):l($t))))]),_:1})]),default:a(()=>[V(" "+B(I.value?"表格视图":"图表视图"),1)]),_:1}),t(l(ge),{type:"primary",size:"small",onClick:H,loading:te.value},{icon:a(()=>[t($,null,{default:a(()=>[(m(),Q(Ke(M.value?l(Ct):l(kt))))]),_:1})]),default:a(()=>[V(" "+B(M.value?"显示最近30条":"显示所有提交"),1)]),_:1},8,["loading"]),t(l(ge),{circle:"",size:"small",onClick:i[0]||(i[0]=u=>le()),loading:te.value,class:ye({"refresh-button-animated":W.value})},{default:a(()=>[t($,null,{default:a(()=>[t(l(lt))]),_:1})]),_:1},8,["loading","class"])])]),e("div",ya,[G.value?(m(),w("div",ha,B(G.value),1)):(m(),w("div",_a,[I.value?(m(),w("div",wa,[l(d).length>0?(m(),w("div",$a," 显示 "+B(l(d).length)+" 条提交记录 "+B(M.value?"(全部)":"(最近30条)"),1)):oe("",!0),e("div",Ca,[e("div",ka,[t(l(ge),{type:"primary",circle:"",size:"small",onClick:o,disabled:g.value<=Te},{default:a(()=>[t($,null,{default:a(()=>[t(l(bt))]),_:1})]),_:1},8,["disabled"]),t(l(St),{modelValue:g.value,"onUpdate:modelValue":i[1]||(i[1]=u=>g.value=u),min:Te,max:Re,step:Ue,onChange:U,class:"zoom-slider"},null,8,["modelValue"]),t(l(ge),{type:"primary",circle:"",size:"small",onClick:S,disabled:g.value>=Re},{default:a(()=>[t($,null,{default:a(()=>[t(l(Tt))]),_:1})]),_:1},8,["disabled"]),t(l(ge),{type:"primary",size:"small",onClick:x},{default:a(()=>i[8]||(i[8]=[V(" 自适应大小 ")])),_:1})]),e("div",ba," 缩放: "+B(Math.round(g.value*100))+"% ",1)]),e("div",{ref_key:"graphContainer",ref:A,class:"graph-container"},null,512)])):(m(),w("div",Sa,[e("div",Ta,[e("div",Va,[t(l(Le),{type:"info",effect:"plain",size:"large",class:"record-count"},{icon:a(()=>[t($,null,{default:a(()=>[t(l(Ge))]),_:1})]),default:a(()=>[V(" 显示 "+B(fe.value.length)+"/"+B(j.value.length)+" 条记录 ",1),M.value?(m(),Q(l(Le),{key:1,type:"success",size:"small",effect:"plain",style:{"margin-left":"5px"}},{default:a(()=>i[10]||(i[10]=[V(" 全部 ")])),_:1})):(m(),Q(l(Le),{key:0,type:"warning",size:"small",effect:"plain",style:{"margin-left":"5px"}},{default:a(()=>i[9]||(i[9]=[V(" 最近30条 ")])),_:1}))]),_:1})]),e("div",La,[t(l(ge),{type:N.value?"primary":"default",size:"default",onClick:i[2]||(i[2]=u=>N.value=!N.value)},{icon:a(()=>[t($,null,{default:a(()=>[t(l(Lt))]),_:1})]),default:a(()=>[i[11]||(i[11]=V(" 筛选 ")),fe.value.length!==j.value.length?(m(),Q(l(Vt),{key:0,value:fe.value.length,class:"filter-badge"},null,8,["value"])):oe("",!0)]),_:1},8,["type"])])]),N.value?(m(),w("div",Ra,[e("div",Ga,[e("div",Da,[i[12]||(i[12]=e("div",{class:"filter-label"},"作者:",-1)),t(l(Ne),{modelValue:q.value,"onUpdate:modelValue":i[3]||(i[3]=u=>q.value=u),placeholder:"选择作者",clearable:"",filterable:"",class:"filter-input"},{default:a(()=>[(m(!0),w(de,null,me(re.value,u=>(m(),Q(l(Me),{key:u,label:u,value:u},null,8,["label","value"]))),128))]),_:1},8,["modelValue"])]),e("div",xa,[i[13]||(i[13]=e("div",{class:"filter-label"},"提交信息包含:",-1)),t(l(Be),{modelValue:ee.value,"onUpdate:modelValue":i[4]||(i[4]=u=>ee.value=u),placeholder:"关键词",clearable:"",class:"filter-input"},null,8,["modelValue"])]),e("div",za,[i[14]||(i[14]=e("div",{class:"filter-label"},"日期范围:",-1)),t(l(Rt),{modelValue:K.value,"onUpdate:modelValue":i[5]||(i[5]=u=>K.value=u),type:"daterange","range-separator":"至","start-placeholder":"开始日期","end-placeholder":"结束日期",format:"YYYY-MM-DD","value-format":"YYYY-MM-DD",class:"filter-input date-range"},null,8,["modelValue"])]),e("div",Ea,[t(l(ge),{type:"info",size:"small",onClick:se},{default:a(()=>i[15]||(i[15]=[V("重置")])),_:1})])])])):oe("",!0),De((m(),Q(l(Gt),{data:fe.value,style:{width:"100%"},stripe:"",border:""},{default:a(()=>[t(l(Se),{label:"提交哈希",width:"100",resizable:""},{default:a(u=>[e("span",{class:"commit-hash",onClick:p=>_(u.row)},B(u.row.hash.substring(0,7)),9,Ba)]),_:1}),t(l(Se),{prop:"date",label:"日期",width:"120",resizable:""}),t(l(Se),{label:"作者",width:"120",resizable:""},{default:a(u=>[t(P,{content:u.row.email,placement:"top","hide-after":1e3},{default:a(()=>[e("span",ja,B(u.row.author),1)]),_:2},1032,["content"])]),_:1}),t(l(Se),{label:"分支",width:"180",resizable:""},{default:a(u=>[u.row.branch?(m(),w("div",Aa,[(m(!0),w(de,null,me(u.row.branch.split(","),(p,s)=>(m(),Q(l(Le),{key:s,size:"small",type:ce(p),class:"branch-tag"},{default:a(()=>[V(B(ae(p)),1)]),_:2},1032,["type"]))),128))])):oe("",!0)]),_:1}),t(l(Se),{prop:"message",label:"提交信息","min-width":"250"})]),_:1},8,["data"])),[[ne,te.value]])]))]))]),t(l(Ee),{modelValue:X.value,"onUpdate:modelValue":i[6]||(i[6]=u=>X.value=u),title:`提交详情: ${(pe=Y.value)!=null&&pe.hash?Y.value.hash.substring(0,7):"未知"}`,width:"80%","destroy-on-close":"",class:"commit-detail-dialog"},{default:a(()=>[De((m(),w("div",Oa,[Y.value?(m(),w("div",Ua,[e("div",Fa,[e("div",Ia,[i[16]||(i[16]=e("span",{class:"item-label"},"哈希:",-1)),e("span",Pa,B(Y.value.hash),1)]),e("div",Ma,[i[17]||(i[17]=e("span",{class:"item-label"},"作者:",-1)),e("span",Na,B(Y.value.author)+" <"+B(Y.value.email)+">",1)]),e("div",Ha,[i[18]||(i[18]=e("span",{class:"item-label"},"日期:",-1)),e("span",Wa,B(Y.value.date),1)])]),e("div",Ja,[i[19]||(i[19]=e("div",{class:"message-label"},"提交信息:",-1)),e("div",{class:"message-content",innerHTML:T(Y.value.message).replace(/\n/g,"<br>")},null,8,Ya)])])):oe("",!0),e("div",qa,[e("div",Za,[i[20]||(i[20]=e("h3",null,"变更文件",-1)),L.value.length===0?(m(),Q(k,{key:0,description:"没有找到变更文件"})):(m(),w("ul",Xa,[(m(!0),w(de,null,me(L.value,u=>(m(),w("li",{key:u,class:ye({"active-file":u===C.value}),onClick:p=>c(Y.value.hash,u)},B(u),11,Ka))),128))]))]),e("div",Qa,[C.value?(m(),w("h3",el,"文件差异: "+B(C.value),1)):(m(),w("h3",tl,"文件差异")),!D.value&&!O.value?(m(),Q(k,{key:2,description:"选择文件查看差异"})):D.value?(m(),w("div",{key:3,innerHTML:z(D.value),class:"diff-content"},null,8,sl)):oe("",!0)])])])),[[ne,O.value]])]),_:1},8,["modelValue","title"])])}}}),ll=je(al,[["__scopeId","data-v-3e613361"]]),ol="data:image/svg+xml,%3csvg%20width='200'%20height='200'%20viewBox='0%200%20200%20200'%20xmlns='http://www.w3.org/2000/svg'%3e%3c!--%20主分支%20--%3e%3cline%20x1='40'%20y1='40'%20x2='40'%20y2='160'%20stroke='%2334495e'%20stroke-width='8'%20stroke-linecap='round'%20/%3e%3c!--%20特性分支%20--%3e%3cpath%20d='M40,70%20C60,70%2080,90%2080,110%20L80,130'%20stroke='%233498db'%20stroke-width='8'%20stroke-linecap='round'%20stroke-linejoin='round'%20fill='none'%20/%3e%3c!--%20开发分支%20--%3e%3cpath%20d='M40,100%20C60,100%20100,110%20100,130%20L100,160'%20stroke='%232ecc71'%20stroke-width='8'%20stroke-linecap='round'%20stroke-linejoin='round'%20fill='none'%20/%3e%3c!--%20修复分支%20--%3e%3cpath%20d='M40,130%20C60,130%20120,140%20120,160'%20stroke='%23e74c3c'%20stroke-width='8'%20stroke-linecap='round'%20stroke-linejoin='round'%20fill='none'%20/%3e%3c!--%20合并点%20--%3e%3cpath%20d='M80,130%20C80,145%2060,145%2040,145'%20stroke='%233498db'%20stroke-width='8'%20stroke-linecap='round'%20stroke-linejoin='round'%20fill='none'%20/%3e%3c!--%20节点%20--%3e%3ccircle%20cx='40'%20cy='40'%20r='10'%20fill='%2334495e'%20/%3e%3ccircle%20cx='40'%20cy='70'%20r='10'%20fill='%2334495e'%20/%3e%3ccircle%20cx='40'%20cy='100'%20r='10'%20fill='%2334495e'%20/%3e%3ccircle%20cx='40'%20cy='130'%20r='10'%20fill='%2334495e'%20/%3e%3ccircle%20cx='40'%20cy='145'%20r='10'%20fill='%2334495e'%20/%3e%3ccircle%20cx='40'%20cy='160'%20r='10'%20fill='%2334495e'%20/%3e%3ccircle%20cx='80'%20cy='130'%20r='10'%20fill='%233498db'%20/%3e%3ccircle%20cx='100'%20cy='160'%20r='10'%20fill='%232ecc71'%20/%3e%3ccircle%20cx='120'%20cy='160'%20r='10'%20fill='%23e74c3c'%20/%3e%3c/svg%3e",nl={class:"main-header"},il={class:"header-left"},rl=["src"],cl={class:"header-info"},ul={key:0,id:"user-info"},dl={class:"user-name"},fl={class:"user-email"},pl={key:1,id:"user-info"},ml={class:"main-container"},vl={key:0,class:"loading-container"},gl={class:"loading-spinner"},yl={key:1,class:"grid-layout"},hl={class:"git-status-panel"},_l={key:0,class:"commit-form-panel"},wl={key:0,class:"card"},$l={class:"tips"},Cl={key:1,class:"commit-form-panel"},kl={key:2,class:"log-list-panel"},bl={class:"dialog-footer"},Sl={class:"main-footer"},Tl={key:0,class:"branch-info"},Vl={class:"branch-wrapper"},Ll={class:"dialog-footer"},Rl=ze({__name:"App",setup(Z){const y=f(""),R=f(null),h=f(null),d=we(),j=f(!1),G=f("");async function J(){try{const o=await(await fetch("/api/config/getConfig")).json();y.value=`默认提交信息: ${o.defaultCommitMessage}`}catch(S){console.error("加载配置失败:",S)}}async function te(){try{const o=await(await fetch("/api/current_directory")).json();return G.value=o.directory||"未知目录",o}catch(S){return console.error("获取当前目录失败:",S),{directory:"未知目录",isGitRepo:!1}}}Ve(async()=>{console.log("---------- 页面初始化开始 ----------");try{const[S,o]=await Promise.all([J(),te()]);d.isGitRepo=o.isGitRepo===!0,d.lastCheckedTime=Date.now(),d.isGitRepo?await Promise.all([d.getCurrentBranch(),d.getAllBranches(),d.getUserInfo()]):r.warning("当前目录不是Git仓库，部分功能将不可用")}catch(S){console.error("初始化失败:",S)}finally{j.value=!0,console.log("---------- 页面初始化完成 ----------"),setTimeout(()=>{ve()},100)}});const M=f(!1),F=f(""),I=f("");async function A(){await d.createBranch(F.value,I.value)&&(M.value=!1,F.value="",h.value&&h.value.refreshStatus(),R.value&&R.value.refreshLog())}function X(){I.value=d.currentBranch,M.value=!0}async function Y(S){await d.changeBranch(S)&&(h.value&&h.value.refreshStatus(),R.value&&R.value.refreshLog())}const L=f(!1),D=f(""),O=f("");function C(){D.value=d.userName,O.value=d.userEmail,L.value=!0}async function g(){if(!D.value||!O.value){r.warning("用户名和邮箱不能为空");return}await d.restoreUserConfig(D.value,O.value)&&(L.value=!1)}async function W(){await d.clearUserConfig()&&(D.value="",O.value="")}let N=!1,q=!1,ee=0,K=0,re="",fe="";function se(){const S=document.querySelector(".grid-layout");if(!S)return;const o=getComputedStyle(S).gridTemplateColumns.split(" "),U=getComputedStyle(S).gridTemplateRows.split(" ");if(o.length>=3&&U.length>=3){const x=parseFloat(o[0]),_=parseFloat(o[2]),c=x+_,z=x/c,T=parseFloat(U[0]),n=parseFloat(U[2]),i=T+n,$=T/i;localStorage.setItem("zen-gitsync-layout-left-ratio",z.toString()),localStorage.setItem("zen-gitsync-layout-top-ratio",$.toString()),console.log(`布局比例已保存 - 左侧: ${(z*100).toFixed(0)}%, 上方: ${($*100).toFixed(0)}%`)}}function ve(){const S=document.querySelector(".grid-layout");if(!S)return;const o=localStorage.getItem("zen-gitsync-layout-left-ratio"),U=localStorage.getItem("zen-gitsync-layout-top-ratio");if(o){const x=parseFloat(o),_=1-x;S.style.gridTemplateColumns=`${x}fr 8px ${_}fr`,console.log(`已恢复左侧比例: ${(x*100).toFixed(0)}%`)}else S.style.gridTemplateColumns="1fr 8px 3fr";if(U){const x=parseFloat(U),_=1-x;S.style.gridTemplateRows=`${x}fr 8px ${_}fr`,console.log(`已恢复上方比例: ${(x*100).toFixed(0)}%`)}}function v(S){var U;N=!0,ee=S.clientX;const o=document.querySelector(".grid-layout");re=getComputedStyle(o).gridTemplateColumns,(U=document.getElementById("v-resizer"))==null||U.classList.add("active"),document.addEventListener("mousemove",b),document.addEventListener("mouseup",H),S.preventDefault()}function b(S){if(!N)return;const o=document.querySelector(".grid-layout"),U=S.clientX-ee,x=re.split(" ");if(x.length>=3){const _=parseFloat(x[0]),c=parseFloat(x[2]),z=_+c,T=(_+U/o.clientWidth*z)/z,n=1-T,i=.1,$=.5;T<i?o.style.gridTemplateColumns=`${i}fr 8px ${1-i}fr`:T>$?o.style.gridTemplateColumns=`${$}fr 8px ${1-$}fr`:o.style.gridTemplateColumns=`${T}fr 8px ${n}fr`}}function H(){var S;N=!1,(S=document.getElementById("v-resizer"))==null||S.classList.remove("active"),document.removeEventListener("mousemove",b),document.removeEventListener("mouseup",H),se()}function ae(S){var U;q=!0,K=S.clientY;const o=document.querySelector(".grid-layout");fe=getComputedStyle(o).gridTemplateRows,(U=document.getElementById("h-resizer"))==null||U.classList.add("active"),document.addEventListener("mousemove",ce),document.addEventListener("mouseup",le),S.preventDefault()}function ce(S){if(!q)return;const o=document.querySelector(".grid-layout"),U=S.clientY-K,x=fe.split(" ");if(x.length>=3){const _=parseFloat(x[0]),c=parseFloat(x[2]),z=_+c,T=(_+U/o.clientHeight*z)/z,n=1-T,i=.2,$=.8;T<i?o.style.gridTemplateRows=`${i}fr 8px ${1-i}fr`:T>$?o.style.gridTemplateRows=`${$}fr 8px ${1-$}fr`:o.style.gridTemplateRows=`${T}fr 8px ${n}fr`}}function le(){var S;q=!1,(S=document.getElementById("h-resizer"))==null||S.classList.remove("active"),document.removeEventListener("mousemove",ce),document.removeEventListener("mouseup",le),se()}return(S,o)=>{const U=Pe,x=ge,_=rt,c=Be,z=st,T=Me,n=Ne,i=tt,$=Ee,P=nt;return m(),w(de,null,[e("header",nl,[e("div",il,[e("img",{src:l(ol),alt:"Zen GitSync Logo",class:"logo"},null,8,rl),o[9]||(o[9]=e("h1",null,"Zen GitSync UI",-1))]),e("div",cl,[l(d).userName&&l(d).userEmail?(m(),w("div",ul,[o[10]||(o[10]=e("span",{class:"user-label"},"用户:",-1)),e("span",dl,B(l(d).userName),1),e("span",fl,"<"+B(l(d).userEmail)+">",1),t(x,{type:"primary",size:"small",onClick:C,class:"user-settings-btn",circle:""},{default:a(()=>[t(U,null,{default:a(()=>[t(l(xe))]),_:1})]),_:1})])):(m(),w("div",pl,[o[11]||(o[11]=e("span",{class:"user-label"},"用户: ",-1)),o[12]||(o[12]=e("span",{class:"user-warning"},"未配置",-1)),t(x,{type:"primary",size:"small",onClick:C,class:"user-settings-btn",circle:""},{default:a(()=>[t(U,null,{default:a(()=>[t(l(xe))]),_:1})]),_:1})]))])]),e("main",ml,[j.value?(m(),w("div",yl,[e("div",hl,[t(Ls,{ref_key:"gitStatusRef",ref:h,"initial-directory":G.value},null,8,["initial-directory"])]),e("div",{class:"vertical-resizer",id:"v-resizer",onMousedown:v},null,32),l(d).isGitRepo?(m(),w("div",_l,[!l(d).userName||!l(d).userEmail?(m(),w("div",wl,[o[18]||(o[18]=e("h2",null,"Git用户未配置",-1)),o[19]||(o[19]=e("p",null,"请先配置Git用户信息才能进行提交操作。",-1)),e("div",$l,[o[16]||(o[16]=e("h3",null,"您可以通过以下方式配置：",-1)),o[17]||(o[17]=e("ol",null,[e("li",null,"点击右上角的设置按钮，配置用户名和邮箱"),e("li",null,"或者使用命令行配置："),e("div",{class:"code-block"},[V(' git config --global user.name "您的用户名"'),e("br"),V(' git config --global user.email "您的邮箱" ')])],-1)),t(x,{type:"primary",onClick:C},{default:a(()=>o[15]||(o[15]=[V(" 立即配置 ")])),_:1})])])):(m(),Q(fa,{key:1}))])):(m(),w("div",Cl,o[20]||(o[20]=[e("div",{class:"card"},[e("h2",null,"Git仓库初始化"),e("p",null,"当前目录不是Git仓库，请先初始化Git仓库或切换到Git仓库目录。"),e("div",{class:"tips"},[e("h3",null,"可以使用以下命令初始化仓库："),e("div",{class:"code-block"},"git init")])],-1)]))),e("div",{class:"horizontal-resizer",id:"h-resizer",onMousedown:ae},null,32),l(d).isGitRepo?(m(),w("div",kl,[t(ll,{ref_key:"logListRef",ref:R},null,512)])):oe("",!0),t($,{modelValue:M.value,"onUpdate:modelValue":o[3]||(o[3]=k=>M.value=k),title:"创建新分支",width:"30%","destroy-on-close":""},{footer:a(()=>[e("span",bl,[t(x,{onClick:o[2]||(o[2]=k=>M.value=!1)},{default:a(()=>o[21]||(o[21]=[V("取消")])),_:1}),t(x,{type:"primary",onClick:A,loading:l(d).isCreatingBranch},{default:a(()=>o[22]||(o[22]=[V(" 创建 ")])),_:1},8,["loading"])])]),default:a(()=>[t(i,{model:{newBranchName:F.value,selectedBaseBranch:I.value}},{default:a(()=>[t(z,{label:"新分支名称"},{default:a(()=>[t(c,{modelValue:F.value,"onUpdate:modelValue":o[0]||(o[0]=k=>F.value=k),placeholder:"请输入新分支名称"},null,8,["modelValue"])]),_:1}),t(z,{label:"基于分支"},{default:a(()=>[t(n,{modelValue:I.value,"onUpdate:modelValue":o[1]||(o[1]=k=>I.value=k),placeholder:"选择基础分支",style:{width:"100%"}},{default:a(()=>[(m(!0),w(de,null,me(l(d).allBranches,k=>(m(),Q(T,{key:k,label:k,value:k},null,8,["label","value"]))),128))]),_:1},8,["modelValue"])]),_:1})]),_:1},8,["model"])]),_:1},8,["modelValue"])])):(m(),w("div",vl,[t(_,{class:"loading-card"},{default:a(()=>[e("div",gl,[t(U,{class:"is-loading"},{default:a(()=>o[13]||(o[13]=[e("svg",{viewBox:"0 0 1024 1024",xmlns:"http://www.w3.org/2000/svg"},[e("path",{fill:"currentColor",d:"M512 64a32 32 0 0 1 32 32v192a32 32 0 0 1-64 0V96a32 32 0 0 1 32-32zm0 640a32 32 0 0 1 32 32v192a32 32 0 1 1-64 0V736a32 32 0 0 1 32-32zm448-192a32 32 0 0 1-32 32H736a32 32 0 1 1 0-64h192a32 32 0 0 1 32 32zm-640 0a32 32 0 0 1-32 32H96a32 32 0 0 1 0-64h192a32 32 0 0 1 32 32zM195.2 195.2a32 32 0 0 1 45.248 0L376.32 331.008a32 32 0 0 1-45.248 45.248L195.2 240.448a32 32 0 0 1 0-45.248zm452.544 452.544a32 32 0 0 1 45.248 0L828.8 783.552a32 32 0 0 1-45.248 45.248L647.744 692.992a32 32 0 0 1 0-45.248zM828.8 195.264a32 32 0 0 1 0 45.184L692.992 376.32a32 32 0 0 1-45.248-45.248l135.808-135.808a32 32 0 0 1 45.248 0zm-452.544 452.48a32 32 0 0 1 0 45.248L240.448 828.8a32 32 0 0 1-45.248-45.248l135.808-135.808a32 32 0 0 1 45.248 0z"})],-1)])),_:1})]),o[14]||(o[14]=e("div",{class:"loading-text"},"加载中...",-1))]),_:1})]))]),e("footer",Sl,[l(d).currentBranch?(m(),w("div",Tl,[e("div",Vl,[o[24]||(o[24]=e("span",{class:"branch-label"},"当前分支:",-1)),t(n,{modelValue:l(d).currentBranch,"onUpdate:modelValue":o[4]||(o[4]=k=>l(d).currentBranch=k),size:"small",onChange:Y,loading:l(d).isChangingBranch,class:"branch-select"},{default:a(()=>[(m(!0),w(de,null,me(l(d).allBranches,k=>(m(),Q(T,{key:k,label:k,value:k},null,8,["label","value"]))),128))]),_:1},8,["modelValue","loading"]),t(x,{type:"primary",size:"small",onClick:X,class:"create-branch-btn"},{default:a(()=>[t(U,null,{default:a(()=>[t(l(xt))]),_:1}),o[23]||(o[23]=V(" 新建分支 "))]),_:1})])])):oe("",!0),o[25]||(o[25]=e("div",{class:"footer-right"},null,-1))]),t($,{modelValue:L.value,"onUpdate:modelValue":o[8]||(o[8]=k=>L.value=k),title:"Git用户设置",width:"30%","destroy-on-close":""},{footer:a(()=>[e("span",Ll,[t(x,{type:"danger",onClick:W},{default:a(()=>o[27]||(o[27]=[V(" 清除配置 ")])),_:1}),t(x,{onClick:o[7]||(o[7]=k=>L.value=!1)},{default:a(()=>o[28]||(o[28]=[V("取消")])),_:1}),t(x,{type:"primary",onClick:g},{default:a(()=>o[29]||(o[29]=[V(" 保存 ")])),_:1})])]),default:a(()=>[t(i,null,{default:a(()=>[t(z,{label:"用户名"},{default:a(()=>[t(c,{modelValue:D.value,"onUpdate:modelValue":o[5]||(o[5]=k=>D.value=k),placeholder:"请输入Git用户名"},null,8,["modelValue"])]),_:1}),t(z,{label:"邮箱"},{default:a(()=>[t(c,{modelValue:O.value,"onUpdate:modelValue":o[6]||(o[6]=k=>O.value=k),placeholder:"请输入Git邮箱"},null,8,["modelValue"])]),_:1}),t(z,null,{default:a(()=>[t(P,{type:"info",closable:!1,"show-icon":""},{default:a(()=>o[26]||(o[26]=[V(" 这些设置将影响全局Git配置，对所有Git仓库生效。 ")])),_:1})]),_:1})]),_:1})]),_:1},8,["modelValue"])],64)}}}),Gl=je(Rl,[["__scopeId","data-v-8ba54a98"]]),ct=zt(Gl);ct.use(Et());ct.mount("#app");
