import{d as He,r,E as s,a as he,c as ye,o as _e,b as k,e as f,f as o,g as ee,h as t,i as Je,w as i,u as p,j as je,t as D,k as te,l as j,m as We,F as se,n as ae,p as Ae,q as Ze,s as qe,v as Oe,x as Le,y as ct,z as Ue,A as Y,B as ut,C as Ke,D as dt,G as pt,H as ft,I as Qe,J as Xe,K as Re,L as ze,M as mt,N as Ye,O as et,P as Ie,Q as tt,R as vt,S as gt,T as yt,U as st,V as ht,W as Fe,X as _t,Y as wt,Z as Ct,_ as de,$ as $t,a0 as kt,a1 as bt,a2 as St,a3 as Tt}from"./vendor-CdJ34PvS.js";(function(){const I=document.createElement("link").relList;if(I&&I.supports&&I.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))b(a);new MutationObserver(a=>{for(const m of a)if(m.type==="childList")for(const T of m.addedNodes)T.tagName==="LINK"&&T.rel==="modulepreload"&&b(T)}).observe(document,{childList:!0,subtree:!0});function v(a){const m={};return a.integrity&&(m.integrity=a.integrity),a.referrerPolicy&&(m.referrerPolicy=a.referrerPolicy),a.crossOrigin==="use-credentials"?m.credentials="include":a.crossOrigin==="anonymous"?m.credentials="omit":m.credentials="same-origin",m}function b(a){if(a.ep)return;a.ep=!0;const m=v(a);fetch(a.href,m)}})();const ne=He("git",()=>{const N=r(""),I=r([]),v=r(""),b=r(""),a=r(!1),m=r(!1),T=r(!1),g=r(0);async function F(){const y=Date.now();if(y-g.value<1e3)return console.log("使用缓存的Git仓库状态:",T.value?"是":"不是"),T.value;try{const B=await(await fetch("/api/current_directory")).json();return T.value=B.isGitRepo===!0,g.value=y,console.log(`当前目录${T.value?"是":"不是"}Git仓库`),T.value}catch(_){return console.error("检查Git仓库状态失败:",_),T.value=!1,g.value=y,!1}}async function z(){try{const _=await(await fetch("/api/branch")).json();_.branch&&(N.value=_.branch)}catch(y){console.error("获取分支信息失败:",y)}}async function G(){try{const _=await(await fetch("/api/branches")).json();_.branches&&Array.isArray(_.branches)&&(I.value=_.branches)}catch(y){console.error("获取所有分支信息失败:",y)}}async function V(y){console.log("切换到分支:",y);try{a.value=!0;const B=await(await fetch("/api/checkout",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({branch:y})})).json();return B.success?(s({message:`已切换到分支: ${y}`,type:"success"}),z(),!0):(s({message:`切换分支失败: ${B.error}`,type:"error"}),!1)}catch(_){return s({message:`切换分支失败: ${_.message}`,type:"error"}),!1}finally{a.value=!1}}async function L(){try{const _=await(await fetch("/api/user-info")).json();_.name&&_.email&&(v.value=_.name,b.value=_.email)}catch(y){console.error("获取用户信息失败:",y)}}async function P(y,_){if(!y.trim())return s({message:"分支名称不能为空",type:"warning"}),!1;try{m.value=!0;const d=await(await fetch("/api/create-branch",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({newBranchName:y,baseBranch:_||N.value})})).json();return d.success?(s({message:`已创建并切换到分支: ${y}`,type:"success"}),z(),G(),!0):(s({message:`创建分支失败: ${d.error}`,type:"error"}),!1)}catch(B){return s({message:`创建分支失败: ${B.message}`,type:"error"}),!1}finally{m.value=!1}}async function A(){await F()?(z(),G(),L()):(N.value="",I.value=[],v.value="",b.value="")}return{currentBranch:N,allBranches:I,userName:v,userEmail:b,isChangingBranch:a,isCreatingBranch:m,isGitRepo:T,lastCheckedTime:g,checkGitRepo:F,getCurrentBranch:z,getAllBranches:G,changeBranch:V,getUserInfo:L,createBranch:P,loadInitialData:A}}),we=He("gitLog",()=>{const N=ne(),I=r([]),v=r({staged:[],unstaged:[],untracked:[]}),b=r(!1),a=r(!1),m=r(!1),T=r(!1);async function g(){if(!N.isGitRepo){console.log("当前目录不是Git仓库，跳过加载提交历史");return}try{b.value=!0,console.log("开始加载提交历史...");const c=await(await fetch("/api/log")).json();c.log&&Array.isArray(c.log)&&(I.value=c.log),console.log(`提交历史加载完成，共 ${I.value.length} 条记录`)}catch(d){console.error("获取提交历史失败:",d),s({message:`获取提交历史失败: ${d.message}`,type:"error"})}finally{b.value=!1}}async function F(){if(!N.isGitRepo){console.log("当前目录不是Git仓库，跳过加载Git状态");return}try{a.value=!0;const c=await(await fetch("/api/status")).json();c.status&&(v.value={staged:c.status.staged||[],unstaged:c.status.unstaged||[],untracked:c.status.untracked||[]})}catch(d){console.error("获取Git状态失败:",d),s({message:`获取Git状态失败: ${d.message}`,type:"error"})}finally{a.value=!1}}async function z(){if(!N.isGitRepo)return s.warning("当前目录不是Git仓库"),!1;try{m.value=!0;const c=await(await fetch("/api/add",{method:"POST"})).json();return c.success?(s({message:"文件已添加到暂存区",type:"success"}),F(),!0):(s({message:`添加文件失败: ${c.error}`,type:"error"}),!1)}catch(d){return s({message:`添加文件失败: ${d.message}`,type:"error"}),!1}finally{m.value=!1}}async function G(d,c=!1){if(!N.isGitRepo)return s.warning("当前目录不是Git仓库"),!1;try{const H=await(await fetch("/api/commit",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({message:d,hasNewlines:d.includes(`
`),noVerify:c})})).json();return H.success?(s({message:"提交成功",type:"success"}),F(),g(),!0):(s({message:`提交失败: ${H.error}`,type:"error"}),!1)}catch(n){return s({message:`提交失败: ${n.message}`,type:"error"}),!1}}async function V(){if(!N.isGitRepo)return s.warning("当前目录不是Git仓库"),!1;try{const c=await(await fetch("/api/push",{method:"POST"})).json();return c.success?(s({message:"推送成功",type:"success"}),g(),!0):(s({message:`推送失败: ${c.error}`,type:"error"}),!1)}catch(d){return s({message:`推送失败: ${d.message}`,type:"error"}),!1}}async function L(d,c=!1){try{return await z()?await G(d,c):!1}catch(n){return s({message:`暂存并提交失败: ${n.message}`,type:"error"}),!1}}async function P(d,c=!1){try{if(!await L(d,c))return!1;const H=await V();return H&&setTimeout(()=>{console.log("刷新提交历史..."),g()},300),H}catch(n){return s({message:`暂存、提交并推送失败: ${n.message}`,type:"error"}),!1}}async function A(){if(!N.isGitRepo)return s.warning("当前目录不是Git仓库"),!1;try{T.value=!0;const c=await(await fetch("/api/reset-head",{method:"POST"})).json();return c.success?(s({message:"已重置暂存区",type:"success"}),F(),!0):(s({message:`重置暂存区失败: ${c.error}`,type:"error"}),!1)}catch(d){return s({message:`重置暂存区失败: ${d.message}`,type:"error"}),!1}finally{T.value=!1}}async function y(d){if(!N.isGitRepo)return s.warning("当前目录不是Git仓库"),!1;try{T.value=!0;const n=await(await fetch("/api/reset-to-remote",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({branch:d})})).json();return n.success?(s({message:`已重置分支 ${d} 到远程状态`,type:"success"}),F(),g(),!0):(s({message:`重置分支失败: ${n.error}`,type:"error"}),!1)}catch(c){return s({message:`重置分支失败: ${c.message}`,type:"error"}),!1}finally{T.value=!1}}async function _(d){if(!N.isGitRepo)return s.warning("当前目录不是Git仓库"),!1;try{const n=await(await fetch("/api/stage",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({files:d})})).json();return n.success?(s({message:"暂存文件成功",type:"success"}),F(),!0):(s({message:`暂存文件失败: ${n.error}`,type:"error"}),!1)}catch(c){return s({message:`暂存文件失败: ${c.message}`,type:"error"}),!1}}async function B(d){if(!N.isGitRepo)return s.warning("当前目录不是Git仓库"),!1;try{const n=await(await fetch("/api/unstage",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({files:d})})).json();return n.success?(s({message:"取消暂存成功",type:"success"}),F(),!0):(s({message:`取消暂存失败: ${n.error}`,type:"error"}),!1)}catch(c){return s({message:`取消暂存失败: ${c.message}`,type:"error"}),!1}}return{log:I,status:v,isLoadingLog:b,isLoadingStatus:a,isAddingFiles:m,isResetting:T,fetchLog:g,fetchStatus:F,addToStage:z,commitChanges:G,pushToRemote:V,addAndCommit:L,addCommitAndPush:P,resetHead:A,resetToRemote:y,stageFiles:_,unstageFiles:B}}),Vt={class:"card"},Gt={class:"current-directory"},Bt={class:"status-header"},xt={class:"status-box"},jt={key:0,class:"file-list"},Dt=["onClick"],Lt={class:"file-type"},Rt={class:"file-path"},zt={class:"file-actions"},At={class:"directory-buttons"},Ot={class:"browser-current-path"},Et={key:0,class:"browser-error"},Pt={class:"directory-browser"},Mt={class:"browser-nav"},Nt={class:"directory-items"},Ut=["onClick"],It={class:"diff-content"},Ft=["innerHTML"],Ht={key:1,class:"no-diff"},Jt={class:"file-navigation"},Wt={class:"file-counter"},Zt=he({__name:"GitStatus",props:{initialDirectory:{type:String,default:""}},setup(N,{expose:I}){const v=N,b=we(),a=ne(),m=r("加载中..."),T=ye(()=>b.isLoadingStatus),g=r([]),F=r(""),z=r(""),G=r(!1),V=r(!1),L=r(-1),P=r(!1),A=r(""),y=r(!1),_=r(!1),B=r(""),d=r([]),c=r(!1),n=r("");function H(h){if(h===void 0)return;const u=h.split(`
`),M=[];for(const S of u){const Z=S.match(/^([ MADRCU\?]{2})\s+(.+)$/);if(Z){let X="";const K=Z[1].trim();K==="M"||K==="MM"||K==="AM"||K==="RM"?X="modified":K==="A"||K==="AA"?X="added":K==="D"||K==="AD"||K==="DA"?X="deleted":K==="??"?X="untracked":X="other",M.push({path:Z[2],type:X})}}g.value=M}const W=r(v.initialDirectory||"");async function w(){try{if(!W.value){const X=await(await fetch("/api/current_directory")).json();W.value=X.directory||"未知目录"}if(!a.isGitRepo){m.value="当前目录不是一个Git仓库",g.value=[];return}const u=await(await fetch("/api/status")).json();m.value=u.status;const S=await(await fetch("/api/status_porcelain")).json();H(S.status),s({message:"Git 状态已刷新",type:"success"})}catch(h){m.value="加载状态失败: "+h.message,g.value=[],s({message:"刷新失败: "+h.message,type:"error"})}}function $(h){if(!h)return"";const u=h.split(`
`);function M(S){return S.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;")}return u.map(S=>{const Z=M(S);return S.startsWith("diff --git")?`<div class="diff-header">${Z}</div>`:S.startsWith("---")?`<div class="diff-old-file">${Z}</div>`:S.startsWith("+++")?`<div class="diff-new-file">${Z}</div>`:S.startsWith("@@")?`<div class="diff-hunk-header">${Z}</div>`:S.startsWith("+")?`<div class="diff-added">${Z}</div>`:S.startsWith("-")?`<div class="diff-removed">${Z}</div>`:`<div class="diff-context">${Z}</div>`}).join("")}async function O(h){try{V.value=!0,F.value=h,L.value=g.value.findIndex(S=>S.path===h);const M=await(await fetch(`/api/diff?file=${encodeURIComponent(h)}`)).json();z.value=M.diff||"没有变更",G.value=!0}catch(u){s({message:"获取文件差异失败: "+u.message,type:"error"}),z.value="获取差异失败: "+u.message}finally{V.value=!1}}async function R(){if(g.value.length===0||L.value<=0)return;const h=L.value-1,u=g.value[h];await O(u.path)}async function E(){if(g.value.length===0||L.value>=g.value.length-1)return;const h=L.value+1,u=g.value[h];await O(u.path)}function J(){A.value=W.value,P.value=!0}function re(){n.value="",B.value=A.value||W.value,_.value=!0,x(B.value)}async function x(h){try{c.value=!0,n.value="";let u=h;/^[A-Za-z]:$/.test(u)&&(u+="/");const M=await fetch(`/api/browse_directory?path=${encodeURIComponent(u)}`);if(M.status===403){const Z=await M.json();n.value=Z.error||"目录浏览功能未启用";return}if(!M.ok){const Z=await M.json();n.value=Z.error||"获取目录内容失败";return}const S=await M.json();S.success?(d.value=S.items,B.value=S.currentPath):n.value=S.error||"获取目录内容失败"}catch(u){n.value=`获取目录内容失败: ${u.message}`}finally{c.value=!1}}function $e(){if(/^[A-Za-z]:$/.test(B.value)||/^[A-Za-z]:[\\/]$/.test(B.value)||B.value==="/")return;let h=B.value.split(/[/\\]/);h.pop();let u=h.join("/");h.length===1&&/^[A-Za-z]:$/.test(h[0])&&(u=h[0]+"/"),u&&x(u)}function ke(h){h.type==="directory"&&x(h.path)}function be(){A.value=B.value,_.value=!1}async function Se(){if(!A.value){s.warning("目录路径不能为空");return}try{y.value=!0;const u=await(await fetch("/api/change_directory",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({path:A.value})})).json();u.success?(s.success("已切换工作目录"),W.value=u.directory,P.value=!1,a.isGitRepo=u.isGitRepo,u.isGitRepo?(await Promise.all([a.getCurrentBranch(),a.getAllBranches(),a.getUserInfo()]),await w()):(s.warning("当前目录不是一个Git仓库"),m.value="当前目录不是一个Git仓库",g.value=[],a.$reset())):s.error(u.error||"切换目录失败")}catch(h){s.error(`切换目录失败: ${h.message}`)}finally{y.value=!1}}function Te(h){O(h.path)}function Ve(h){switch(h){case"added":return"新增";case"modified":return"修改";case"deleted":return"删除";case"untracked":return"未跟踪";default:return"其他"}}async function fe(){await w()}async function Ge(h){try{await Re.confirm(`确定要撤回文件 "${h}" 的所有修改吗？此操作无法撤销。`,"撤回修改",{confirmButtonText:"确定",cancelButtonText:"取消",type:"warning"});const M=await(await fetch("/api/revert_file",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({filePath:h})})).json();M.success?(s.success("已撤回文件修改"),await w()):s.error(M.error||"撤回文件修改失败")}catch(u){u.message!=="cancel"&&s.error(`撤回文件修改失败: ${u.message}`)}}return _e(()=>{w()}),I({refreshStatus:fe}),(h,u)=>{const M=Je,S=te,Z=Xe,X=Oe,K=qe,Be=Ze,ie=Ae,me=Ke;return f(),k("div",Vt,[o("div",Gt,[t(M,null,{default:i(()=>[t(p(je))]),_:1}),o("span",null,D(W.value),1),t(S,{type:"primary",size:"small",onClick:J,plain:""},{default:i(()=>u[4]||(u[4]=[j(" 切换目录 ")])),_:1})]),o("div",Bt,[u[5]||(u[5]=o("h2",null,"Git 状态(git status)",-1)),t(S,{type:"primary",icon:p(We),circle:"",size:"small",onClick:fe,loading:T.value},null,8,["icon","loading"])]),o("div",xt,D(m.value),1),g.value.length?(f(),k("div",jt,[(f(!0),k(se,null,ae(g.value,U=>(f(),k("div",{key:U.path,class:Ue(["file-item",U.type])},[o("div",{class:"file-info",onClick:ve=>Te(U)},[o("span",Lt,D(Ve(U.type)),1),o("span",Rt,D(U.path),1)],8,Dt),o("div",zt,[t(Z,{content:"撤回修改",placement:"top","hide-after":1e3},{default:i(()=>[t(S,{type:"danger",size:"small",icon:p(Qe),circle:"",onClick:ft(ve=>Ge(U.path),["stop"])},null,8,["icon","onClick"])]),_:2},1024)])],2))),128))])):ee("",!0),t(ie,{modelValue:P.value,"onUpdate:modelValue":u[1]||(u[1]=U=>P.value=U),title:"切换工作目录",width:"500px"},{default:i(()=>[t(Be,null,{default:i(()=>[t(K,{label:"目录路径"},{default:i(()=>[t(X,{modelValue:A.value,"onUpdate:modelValue":u[0]||(u[0]=U=>A.value=U),placeholder:"请输入目录路径",clearable:""},null,8,["modelValue"]),o("div",At,[t(S,{onClick:re,type:"primary",plain:"",class:"no-padding-left"},{default:i(()=>[t(M,null,{default:i(()=>[t(p(je))]),_:1}),u[6]||(u[6]=j(" 浏览 "))]),_:1}),t(S,{onClick:Se,loading:y.value,type:"primary"},{default:i(()=>u[7]||(u[7]=[j(" 切换 ")])),_:1},8,["loading"])])]),_:1})]),_:1})]),_:1},8,["modelValue"]),t(ie,{modelValue:_.value,"onUpdate:modelValue":u[2]||(u[2]=U=>_.value=U),title:"浏览目录",width:"600px"},{default:i(()=>[o("div",Ot,[o("span",null,"当前路径: "+D(B.value),1)]),n.value?(f(),k("div",Et,D(n.value),1)):ee("",!0),Le((f(),k("div",Pt,[o("div",Mt,[t(S,{onClick:$e,disabled:!B.value||c.value,size:"small",class:"no-padding-left"},{default:i(()=>[t(M,null,{default:i(()=>[t(p(ct))]),_:1}),u[8]||(u[8]=j(" 上级目录 "))]),_:1},8,["disabled"]),t(S,{onClick:be,type:"primary",size:"small",class:"no-padding-left"},{default:i(()=>u[9]||(u[9]=[j(" 选择当前目录 ")])),_:1})]),o("ul",Nt,[(f(!0),k(se,null,ae(d.value,U=>(f(),k("li",{key:U.path,class:Ue(["directory-item",U.type]),onClick:ve=>ke(U)},[U.type==="directory"?(f(),Y(M,{key:0},{default:i(()=>[t(p(je))]),_:1})):(f(),Y(M,{key:1},{default:i(()=>[t(p(ut))]),_:1})),o("span",null,D(U.name),1)],10,Ut))),128))])])),[[me,c.value]])]),_:1},8,["modelValue"]),t(ie,{modelValue:G.value,"onUpdate:modelValue":u[3]||(u[3]=U=>G.value=U),title:`文件差异: ${F.value}`,width:"80%","destroy-on-close":""},{default:i(()=>[Le((f(),k("div",It,[z.value?(f(),k("div",{key:0,innerHTML:$(z.value),class:"diff-formatted"},null,8,Ft)):(f(),k("div",Ht,"该文件没有差异或是新文件"))])),[[me,V.value]]),o("div",Jt,[t(S,{icon:p(dt),onClick:R,disabled:L.value<=0||g.value.length===0,circle:""},null,8,["icon","disabled"]),o("span",Wt,D(L.value+1)+" / "+D(g.value.length),1),t(S,{icon:p(pt),onClick:E,disabled:L.value>=g.value.length-1||g.value.length===0,circle:""},null,8,["icon","disabled"])])]),_:1},8,["modelValue","title"])])}}}),Ce=(N,I)=>{const v=N.__vccOpts||N;for(const[b,a]of I)v[b]=a;return v},qt=Ce(Zt,[["__scopeId","data-v-3566e789"]]),Kt={class:"card"},Qt={class:"commit-options"},Xt={class:"options-row"},Yt={class:"commit-mode-toggle"},es={class:"no-verify-toggle"},ts={key:0,class:"commit-form"},ss={key:1,class:"standard-commit-form"},as={class:"standard-commit-header"},os={class:"scope-container"},ls={class:"description-container"},ns={class:"preview-section"},rs={class:"preview-content"},is={class:"preview-content code-command"},cs={class:"git-actions"},us={class:"action-row"},ds={class:"action-row"},ps={class:"action-row"},fs={class:"template-container"},ms={class:"template-form"},vs={class:"template-form-buttons"},gs={class:"template-list"},ys={class:"template-content"},hs={class:"template-actions"},_s={class:"template-container"},ws={class:"template-form"},Cs={class:"template-form-buttons"},$s={class:"template-list"},ks={class:"template-content"},bs={class:"template-actions"},Ss=he({__name:"CommitForm",emits:["commit-success","push-success","status-update"],setup(N,{emit:I}){const v=we(),b=ne(),a=I,m=r(""),T=r(!1),g=r(!1),F=r("输入提交信息..."),z=r(""),G=r(!1),V=r("feat"),L=r(""),P=r(""),A=r(""),y=r(""),_=r([]),B=r(!1),d=r(""),c=r(!1),n=r(""),H=r(-1),W=r([]),w=r(!1),$=r(""),O=r(!1),R=r(""),E=r(-1),J=r(!1),re=[{value:"feat",label:"feat: 新功能"},{value:"fix",label:"fix: 修复bug"},{value:"docs",label:"docs: 文档修改"},{value:"style",label:"style: 样式修改"},{value:"refactor",label:"refactor: 代码重构"},{value:"test",label:"test: 测试代码"},{value:"chore",label:"chore: 构建/工具修改"}];ze(G,l=>{localStorage.setItem("zen-gitsync-standard-commit",l.toString())}),ze(J,l=>{localStorage.setItem("zen-gitsync-skip-hooks",l.toString())});const x=ye(()=>{if(!G.value)return m.value||z.value;let l=`${V.value||""}`;return L.value&&(l+=`(${L.value})`),l+=`: ${P.value}`,A.value&&(l+=`

${A.value}`),y.value&&(l+=`

${y.value}`),l}),$e=ye(()=>{let l=`git commit -m "${x.value}"`;return J.value&&(l+=" --no-verify"),l});async function ke(){try{const e=await(await fetch("/api/config/getConfig")).json();F.value=`输入提交信息 (默认: ${e.defaultCommitMessage})`,z.value=e.defaultCommitMessage||"",e.descriptionTemplates&&Array.isArray(e.descriptionTemplates)&&(_.value=e.descriptionTemplates),e.scopeTemplates&&Array.isArray(e.scopeTemplates)&&(W.value=e.scopeTemplates)}catch(l){console.error("加载配置失败:",l)}}async function be(){if(!d.value.trim()){s({message:"请输入模板内容",type:"warning"});return}try{if(c.value)await Se();else{if(_.value.includes(d.value)){s({message:"该模板已存在",type:"warning"});return}_.value.push(d.value);const e=await(await fetch("/api/config/save-template",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({template:d.value,type:"description"})})).json();e.success?(s({message:"模板保存成功!",type:"success"}),d.value=""):s({message:"模板保存失败: "+e.error,type:"error"})}}catch(l){s({message:"模板保存失败: "+l.message,type:"error"})}}async function Se(){try{if(H.value>=0){const l=n.value,e=d.value;_.value[H.value]=e;const Q=await(await fetch("/api/config/update-template",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({oldTemplate:l,newTemplate:e,type:"description"})})).json();Q.success?(s({message:"模板更新成功!",type:"success"}),c.value=!1,n.value="",H.value=-1,d.value=""):s({message:"模板更新失败: "+Q.error,type:"error"})}}catch(l){s({message:"模板更新失败: "+l.message,type:"error"})}}function Te(l,e){c.value=!0,n.value=l,H.value=e,d.value=l}function Ve(){c.value=!1,n.value="",H.value=-1,d.value=""}async function fe(){if(!$.value.trim()){s({message:"请输入模板内容",type:"warning"});return}try{if(O.value)await Ge();else{if(W.value.includes($.value)){s({message:"该模板已存在",type:"warning"});return}W.value.push($.value);const e=await(await fetch("/api/config/save-template",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({template:$.value,type:"scope"})})).json();e.success?(s({message:"作用域模板保存成功!",type:"success"}),$.value=""):s({message:"作用域模板保存失败: "+e.error,type:"error"})}}catch(l){s({message:"作用域模板保存失败: "+l.message,type:"error"})}}async function Ge(){try{if(E.value>=0){const l=R.value,e=$.value;W.value[E.value]=e;const Q=await(await fetch("/api/config/update-template",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({oldTemplate:l,newTemplate:e,type:"scope"})})).json();Q.success?(s({message:"作用域模板更新成功!",type:"success"}),O.value=!1,R.value="",E.value=-1,$.value=""):s({message:"作用域模板更新失败: "+Q.error,type:"error"})}}catch(l){s({message:"作用域模板更新失败: "+l.message,type:"error"})}}function h(l,e){O.value=!0,R.value=l,E.value=e,$.value=l}function u(){O.value=!1,R.value="",E.value=-1,$.value=""}async function M(l){try{const e=_.value.indexOf(l);e!==-1&&_.value.splice(e,1);const Q=await(await fetch("/api/config/delete-template",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({template:l,type:"description"})})).json();Q.success?s({message:"模板删除成功!",type:"success"}):s({message:"模板删除失败: "+Q.error,type:"error"})}catch(e){s({message:"模板删除失败: "+e.message,type:"error"})}}async function S(l){try{const e=W.value.indexOf(l);e!==-1&&W.value.splice(e,1);const Q=await(await fetch("/api/config/delete-template",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({template:l,type:"scope"})})).json();Q.success?s({message:"作用域模板删除成功!",type:"success"}):s({message:"作用域模板删除失败: "+Q.error,type:"error"})}catch(e){s({message:"作用域模板删除失败: "+e.message,type:"error"})}}function Z(l){P.value=l,B.value=!1}function X(l){L.value=l,w.value=!1}function K(){B.value=!0}function Be(){w.value=!0}async function ie(){try{await v.addToStage()&&a("status-update")}catch(l){s({message:`添加文件失败: ${l.message}`,type:"error"})}}async function me(){if(!x.value.trim()){s({message:"提交信息不能为空",type:"warning"});return}try{await v.commitChanges(x.value,J.value)&&(xe(),a("commit-success"),a("status-update"))}catch(l){s({message:`提交失败: ${l.message}`,type:"error"})}}async function U(){try{T.value=!0,await v.pushToRemote()&&(a("push-success"),a("status-update"))}catch(l){s({message:`推送失败: ${l.message}`,type:"error"})}finally{T.value=!1}}async function ve(){if(!x.value.trim()){s({message:"提交信息不能为空",type:"warning"});return}try{await v.addAndCommit(x.value,J.value)&&(xe(),a("commit-success"),a("status-update"))}catch(l){s({message:`暂存并提交失败: ${l.message}`,type:"error"})}}async function ot(){if(!x.value.trim()){s({message:"提交信息不能为空",type:"warning"});return}try{g.value=!0,await v.addCommitAndPush(x.value,J.value)&&(xe(),a("commit-success"),setTimeout(()=>{a("push-success")},300),a("status-update"))}catch(l){s({message:`暂存、提交并推送失败: ${l.message}`,type:"error"})}finally{g.value=!1}}async function lt(){try{await Re.confirm("确定要重置暂存区吗？这将取消所有已暂存的更改，但不会影响工作区的文件。","重置暂存区",{confirmButtonText:"确定",cancelButtonText:"取消",type:"warning"}),await v.resetHead()&&a("status-update")}catch(l){l!=="cancel"&&s({message:`重置暂存区失败: ${l.message}`,type:"error"})}}async function nt(){try{await Re.confirm(`确定要重置当前分支 "${b.currentBranch}" 到远程状态吗？这将丢失所有未推送的提交和本地更改。`,"重置到远程分支",{confirmButtonText:"确定",cancelButtonText:"取消",type:"warning"}),await v.resetToRemote(b.currentBranch)&&a("status-update")}catch(l){l!=="cancel"&&s({message:`重置到远程分支失败: ${l.message}`,type:"error"})}}function xe(){m.value="",P.value="",A.value="",y.value=""}return _e(()=>{ke();const l=localStorage.getItem("zen-gitsync-standard-commit");l!==null&&(G.value=l==="true");const e=localStorage.getItem("zen-gitsync-skip-hooks");e!==null&&(J.value=e==="true")}),(l,e)=>{const le=mt,Q=Xe,oe=Oe,rt=et,it=Ye,q=te,Ee=yt,Pe=ht,Me=st,Ne=Ae;return f(),k("div",Kt,[e[31]||(e[31]=o("h2",null,"提交更改",-1)),o("div",Qt,[o("div",Xt,[o("div",Yt,[t(le,{modelValue:G.value,"onUpdate:modelValue":e[0]||(e[0]=C=>G.value=C),"active-text":"标准化提交","inactive-text":"普通提交"},null,8,["modelValue"])]),o("div",es,[t(Q,{content:"跳过 Git 钩子检查 (--no-verify)",placement:"top"},{default:i(()=>[t(le,{modelValue:J.value,"onUpdate:modelValue":e[1]||(e[1]=C=>J.value=C),"active-text":"跳过钩子 (--no-verify)"},null,8,["modelValue"])]),_:1})])])]),G.value?(f(),k("div",ss,[o("div",as,[t(it,{modelValue:V.value,"onUpdate:modelValue":e[3]||(e[3]=C=>V.value=C),placeholder:"提交类型",class:"type-select",clearable:""},{default:i(()=>[(f(),k(se,null,ae(re,C=>t(rt,{key:C.value,label:C.label,value:C.value},null,8,["label","value"])),64))]),_:1},8,["modelValue"]),o("div",os,[t(oe,{modelValue:L.value,"onUpdate:modelValue":e[4]||(e[4]=C=>L.value=C),placeholder:"作用域（可选）",class:"scope-input",clearable:""},null,8,["modelValue"]),t(q,{type:"primary",icon:p(Ie),circle:"",size:"small",class:"settings-button",onClick:Be},null,8,["icon"])]),o("div",ls,[t(oe,{modelValue:P.value,"onUpdate:modelValue":e[5]||(e[5]=C=>P.value=C),placeholder:"简短描述（必填）",class:"description-input",clearable:""},null,8,["modelValue"]),t(q,{type:"primary",icon:p(Ie),circle:"",size:"small",class:"settings-button",onClick:K},null,8,["icon"])])]),t(oe,{modelValue:A.value,"onUpdate:modelValue":e[6]||(e[6]=C=>A.value=C),type:"textarea",rows:4,placeholder:"正文（可选）：详细描述本次提交的内容和原因",class:"body-input",clearable:""},null,8,["modelValue"]),t(oe,{modelValue:y.value,"onUpdate:modelValue":e[7]||(e[7]=C=>y.value=C),placeholder:"页脚（可选）：如 Closes #123",class:"footer-input",clearable:""},null,8,["modelValue"]),o("div",ns,[e[12]||(e[12]=o("div",{class:"preview-title"},"提交信息预览：",-1)),o("pre",rs,D(x.value),1),e[13]||(e[13]=o("div",{class:"preview-title",style:{"margin-top":"10px"}},"Git命令预览：",-1)),o("pre",is,D($e.value),1)])])):(f(),k("div",ts,[t(oe,{modelValue:m.value,"onUpdate:modelValue":e[2]||(e[2]=C=>m.value=C),placeholder:F.value,clearable:""},null,8,["modelValue","placeholder"])])),o("div",cs,[o("div",us,[t(q,{type:"primary",onClick:ie,loading:p(v).isAddingFiles,icon:p(tt)},{default:i(()=>e[14]||(e[14]=[j(" 添加到暂存区(git add .) ")])),_:1},8,["loading","icon"]),t(q,{type:"primary",onClick:me,loading:p(v).isLoadingStatus},{default:i(()=>e[15]||(e[15]=[j(" 提交(git commit) ")])),_:1},8,["loading"]),t(q,{type:"success",onClick:U,icon:p(vt),loading:T.value},{default:i(()=>e[16]||(e[16]=[j(" 推送(git push) ")])),_:1},8,["icon","loading"])]),o("div",ds,[t(q,{type:"warning",onClick:ve},{default:i(()=>e[17]||(e[17]=[j(" 添加并提交(git add+commit) ")])),_:1}),t(q,{type:"danger",onClick:ot,loading:g.value},{default:i(()=>e[18]||(e[18]=[j(" 添加、提交并推送(git add+commit+push) ")])),_:1},8,["loading"])]),o("div",ps,[t(q,{type:"info",onClick:lt,loading:p(v).isResetting,icon:p(We)},{default:i(()=>e[19]||(e[19]=[j(" 重置暂存区(git reset HEAD) ")])),_:1},8,["loading","icon"]),t(q,{type:"info",onClick:nt,loading:p(v).isResetting,icon:p(gt)},{default:i(()=>e[20]||(e[20]=[j(" 重置到远程(git reset --hard origin/branch) ")])),_:1},8,["loading","icon"])])]),t(Ne,{title:"简短描述模板设置",modelValue:B.value,"onUpdate:modelValue":e[9]||(e[9]=C=>B.value=C),width:"80vw",style:{height:"80vh"}},{default:i(()=>[o("div",fs,[o("div",ms,[t(oe,{modelValue:d.value,"onUpdate:modelValue":e[8]||(e[8]=C=>d.value=C),placeholder:c.value?"编辑模板内容":"输入新模板内容",class:"template-input",clearable:""},null,8,["modelValue","placeholder"]),o("div",vs,[c.value?(f(),Y(q,{key:0,onClick:Ve},{default:i(()=>e[21]||(e[21]=[j("取消")])),_:1})):ee("",!0),t(q,{type:"primary",onClick:be,disabled:!d.value.trim()},{default:i(()=>[j(D(c.value?"更新模板":"添加模板"),1)]),_:1},8,["disabled"])])]),o("div",gs,[e[25]||(e[25]=o("h3",null,"已保存模板",-1)),_.value.length===0?(f(),Y(Ee,{key:0,description:"暂无保存的模板"})):ee("",!0),(f(!0),k(se,null,ae(_.value,(C,ce)=>(f(),Y(Me,{key:ce,class:"template-item"},{default:i(()=>[t(Pe,{justify:"space-between",align:"middle",style:{width:"100%"}},{default:i(()=>[o("div",ys,D(C),1),o("div",hs,[t(q,{type:"primary",size:"small",onClick:ue=>Z(C)},{default:i(()=>e[22]||(e[22]=[j("使用")])),_:2},1032,["onClick"]),t(q,{type:"warning",size:"small",icon:p(Fe),onClick:ue=>Te(C,ce)},{default:i(()=>e[23]||(e[23]=[j("编辑")])),_:2},1032,["icon","onClick"]),t(q,{type:"danger",size:"small",onClick:ue=>M(C)},{default:i(()=>e[24]||(e[24]=[j("删除")])),_:2},1032,["onClick"])])]),_:2},1024)]),_:2},1024))),128))])])]),_:1},8,["modelValue"]),t(Ne,{title:"作用域模板设置",modelValue:w.value,"onUpdate:modelValue":e[11]||(e[11]=C=>w.value=C),width:"80%",style:{height:"80vh"}},{default:i(()=>[o("div",_s,[o("div",ws,[t(oe,{modelValue:$.value,"onUpdate:modelValue":e[10]||(e[10]=C=>$.value=C),placeholder:O.value?"编辑作用域模板内容":"输入新作用域模板",class:"template-input",clearable:""},null,8,["modelValue","placeholder"]),o("div",Cs,[O.value?(f(),Y(q,{key:0,onClick:u},{default:i(()=>e[26]||(e[26]=[j("取消")])),_:1})):ee("",!0),t(q,{type:"primary",onClick:fe,disabled:!$.value.trim()},{default:i(()=>[j(D(O.value?"更新模板":"添加模板"),1)]),_:1},8,["disabled"])])]),o("div",$s,[e[30]||(e[30]=o("h3",null,"已保存作用域",-1)),W.value.length===0?(f(),Y(Ee,{key:0,description:"暂无保存的作用域"})):ee("",!0),(f(!0),k(se,null,ae(W.value,(C,ce)=>(f(),Y(Me,{key:ce,class:"template-item"},{default:i(()=>[t(Pe,{justify:"space-between",align:"middle",style:{width:"100%"}},{default:i(()=>[o("div",ks,D(C),1),o("div",bs,[t(q,{type:"primary",size:"small",onClick:ue=>X(C)},{default:i(()=>e[27]||(e[27]=[j("使用")])),_:2},1032,["onClick"]),t(q,{type:"warning",size:"small",icon:p(Fe),onClick:ue=>h(C,ce)},{default:i(()=>e[28]||(e[28]=[j("编辑")])),_:2},1032,["icon","onClick"]),t(q,{type:"danger",size:"small",onClick:ue=>S(C)},{default:i(()=>e[29]||(e[29]=[j("删除")])),_:2},1032,["onClick"])])]),_:2},1024)]),_:2},1024))),128))])])]),_:1},8,["modelValue"])])}}}),Ts=Ce(Ss,[["__scopeId","data-v-34334c1f"]]),Vs={class:"card"},Gs={class:"log-header"},Bs={class:"log-actions"},xs={key:0},js={key:1},Ds={key:0,class:"graph-view"},Ls={key:0,class:"commit-count"},Rs={class:"graph-controls"},zs={class:"zoom-controls"},As={class:"scale-info"},Os={key:1},Es={key:0,class:"commit-count"},Ps={key:0,class:"branch-container"},pe=.5,ge=1.5,De=.1,Ms=he({__name:"LogList",setup(N,{expose:I}){const v=we(),b=ne(),a=r([]),m=r(""),T=ye(()=>v.isLoadingLog),g=r(!1),F=r(0),z=r(!0),G=r(null),V=r(1);async function L(w=!1){if(!ne().isGitRepo){m.value="当前目录不是Git仓库";return}try{g.value=w;const E=await(await fetch(w?"/api/log?all=true&graph=true":"/api/log?graph=true")).json();Array.isArray(E)?(v.log.length===0&&(v.log=E),a.value=E,F.value=E.length):E.log&&Array.isArray(E.log)&&(v.log.length===0&&(v.log=E.log),a.value=E.log,F.value=E.log.length),m.value="",z.value&&setTimeout(P,0)}catch(O){m.value="加载提交历史失败: "+O.message}}async function P(){if(!G.value||a.value.length===0)return;G.value.innerHTML="";const w=bt(G.value,{orientation:"vertical-reverse",template:"metro",author:"提交者 <committer@example.com>"}),$={},O=w.branch(b.currentBranch||"main");$[b.currentBranch||"main"]=O,a.value.forEach(R=>{let E=O;if(R.branch){const J=_(R.branch.split(",")[0]);$[J]||($[J]=w.branch(J)),E=$[J]}E.commit({hash:R.hash,subject:R.message,author:`${R.author} <${R.email}>`})}),setTimeout(()=>{W()},100)}function A(){z.value=!z.value,z.value&&a.value.length>0&&setTimeout(P,0)}function y(){L(!g.value)}function _(w){return w.includes("HEAD -> ")?w.replace("HEAD -> ",""):w.includes("origin/")?w:w.trim()}function B(w){return w.includes("HEAD")?"success":w.includes("origin/")?"warning":"info"}_e(()=>{b.isGitRepo?L():m.value="当前目录不是Git仓库"});const d=()=>{b.isGitRepo?(v.fetchLog(),L(g.value)):m.value="当前目录不是Git仓库"};ze(()=>v.log,w=>{a.value=w,z.value&&w.length>0&&setTimeout(P,0)}),I({refreshLog:d});function c(){V.value<ge&&(V.value=Math.min(ge,V.value+De),H())}function n(){V.value>pe&&(V.value=Math.max(pe,V.value-De),H())}function H(){if(!G.value)return;const w=G.value.querySelector("svg");w&&(w.style.transform=`scale(${V.value})`,w.style.transformOrigin="top left")}function W(){if(!G.value)return;const w=G.value.querySelector("svg");if(!w)return;const $=w.getBoundingClientRect().width/V.value,O=G.value.clientWidth;$>O?V.value=Math.max(pe,O/$):V.value=1,H()}return(w,$)=>{const O=Ke;return f(),k("div",Vs,[o("div",Gs,[$[2]||($[2]=o("h2",null,"提交历史",-1)),o("div",Bs,[t(p(te),{type:"primary",size:"small",onClick:A},{default:i(()=>[j(D(z.value?"表格视图":"图表视图"),1)]),_:1}),t(p(te),{type:"primary",size:"small",onClick:y,loading:T.value},{default:i(()=>[j(D(g.value?"显示最近30条":"显示所有提交"),1)]),_:1},8,["loading"]),t(p(te),{icon:p(Qe),circle:"",size:"small",onClick:$[0]||($[0]=R=>d()),loading:T.value},null,8,["icon","loading"])])]),m.value?(f(),k("div",xs,D(m.value),1)):(f(),k("div",js,[z.value?(f(),k("div",Ds,[a.value.length>0?(f(),k("div",Ls," 显示 "+D(a.value.length)+" 条提交记录 "+D(g.value?"(全部)":"(最近30条)"),1)):ee("",!0),o("div",Rs,[o("div",zs,[t(p(te),{type:"primary",icon:p(_t),circle:"",size:"small",onClick:n,disabled:V.value<=pe},null,8,["icon","disabled"]),t(p(wt),{modelValue:V.value,"onUpdate:modelValue":$[1]||($[1]=R=>V.value=R),min:pe,max:ge,step:De,onChange:H,class:"zoom-slider"},null,8,["modelValue"]),t(p(te),{type:"primary",icon:p(Ct),circle:"",size:"small",onClick:c,disabled:V.value>=ge},null,8,["icon","disabled"]),t(p(te),{type:"primary",size:"small",onClick:W},{default:i(()=>$[3]||($[3]=[j(" 自适应大小 ")])),_:1})]),o("div",As," 缩放: "+D(Math.round(V.value*100))+"% ",1)]),o("div",{ref_key:"graphContainer",ref:G,class:"graph-container"},null,512)])):(f(),k("div",Os,[a.value.length>0?(f(),k("div",Es," 显示 "+D(a.value.length)+" 条提交记录 "+D(g.value?"(全部)":"(最近30条)"),1)):ee("",!0),Le((f(),Y(p(kt),{data:a.value,style:{width:"100%"},stripe:"",border:""},{default:i(()=>[t(p(de),{prop:"hash",label:"提交哈希",width:"100",resizable:""}),t(p(de),{prop:"date",label:"日期",width:"180",resizable:""}),t(p(de),{label:"作者",width:"200",resizable:""},{default:i(R=>[j(D(R.row.author)+" <"+D(R.row.email)+"> ",1)]),_:1}),t(p(de),{label:"分支",width:"180",resizable:""},{default:i(R=>[R.row.branch?(f(),k("div",Ps,[(f(!0),k(se,null,ae(R.row.branch.split(","),(E,J)=>(f(),Y(p($t),{key:J,size:"small",type:B(E),class:"branch-tag"},{default:i(()=>[j(D(_(E)),1)]),_:2},1032,["type"]))),128))])):ee("",!0)]),_:1}),t(p(de),{prop:"message",label:"提交信息","min-width":"250"})]),_:1},8,["data"])),[[O,T.value]])]))]))])}}}),Ns=Ce(Ms,[["__scopeId","data-v-af48ffa1"]]),Us="data:image/svg+xml,%3csvg%20width='200'%20height='200'%20viewBox='0%200%20200%20200'%20xmlns='http://www.w3.org/2000/svg'%3e%3c!--%20主分支%20--%3e%3cline%20x1='40'%20y1='40'%20x2='40'%20y2='160'%20stroke='%2334495e'%20stroke-width='8'%20stroke-linecap='round'%20/%3e%3c!--%20特性分支%20--%3e%3cpath%20d='M40,70%20C60,70%2080,90%2080,110%20L80,130'%20stroke='%233498db'%20stroke-width='8'%20stroke-linecap='round'%20stroke-linejoin='round'%20fill='none'%20/%3e%3c!--%20开发分支%20--%3e%3cpath%20d='M40,100%20C60,100%20100,110%20100,130%20L100,160'%20stroke='%232ecc71'%20stroke-width='8'%20stroke-linecap='round'%20stroke-linejoin='round'%20fill='none'%20/%3e%3c!--%20修复分支%20--%3e%3cpath%20d='M40,130%20C60,130%20120,140%20120,160'%20stroke='%23e74c3c'%20stroke-width='8'%20stroke-linecap='round'%20stroke-linejoin='round'%20fill='none'%20/%3e%3c!--%20合并点%20--%3e%3cpath%20d='M80,130%20C80,145%2060,145%2040,145'%20stroke='%233498db'%20stroke-width='8'%20stroke-linecap='round'%20stroke-linejoin='round'%20fill='none'%20/%3e%3c!--%20节点%20--%3e%3ccircle%20cx='40'%20cy='40'%20r='10'%20fill='%2334495e'%20/%3e%3ccircle%20cx='40'%20cy='70'%20r='10'%20fill='%2334495e'%20/%3e%3ccircle%20cx='40'%20cy='100'%20r='10'%20fill='%2334495e'%20/%3e%3ccircle%20cx='40'%20cy='130'%20r='10'%20fill='%2334495e'%20/%3e%3ccircle%20cx='40'%20cy='145'%20r='10'%20fill='%2334495e'%20/%3e%3ccircle%20cx='40'%20cy='160'%20r='10'%20fill='%2334495e'%20/%3e%3ccircle%20cx='80'%20cy='130'%20r='10'%20fill='%233498db'%20/%3e%3ccircle%20cx='100'%20cy='160'%20r='10'%20fill='%232ecc71'%20/%3e%3ccircle%20cx='120'%20cy='160'%20r='10'%20fill='%23e74c3c'%20/%3e%3c/svg%3e",Is={class:"main-header"},Fs={class:"header-left"},Hs=["src"],Js={class:"header-info"},Ws={key:0,id:"user-info"},Zs={class:"user-name"},qs={class:"user-email"},Ks={class:"container"},Qs={key:0,class:"loading-container"},Xs={class:"loading-spinner"},Ys={key:1,class:"layout-container"},ea={class:"left-panel"},ta={key:0,class:"right-panel"},sa={key:1,class:"right-panel"},aa={class:"dialog-footer"},oa={class:"main-footer"},la={key:0,class:"branch-info"},na=he({__name:"App",setup(N){const I=r(""),v=r(null),b=r(null),a=ne(),m=we(),T=r(!1),g=r("");async function F(){try{const n=await(await fetch("/api/config/getConfig")).json();I.value=`默认提交信息: ${n.defaultCommitMessage}`}catch(c){console.error("加载配置失败:",c)}}async function z(){try{const n=await(await fetch("/api/current_directory")).json();return g.value=n.directory||"未知目录",n}catch(c){return console.error("获取当前目录失败:",c),{directory:"未知目录",isGitRepo:!1}}}_e(async()=>{console.log("---------- 页面初始化开始 ----------");try{const[c,n]=await Promise.all([F(),z()]);a.isGitRepo=n.isGitRepo===!0,a.lastCheckedTime=Date.now(),a.isGitRepo?await Promise.all([a.getCurrentBranch(),a.getAllBranches(),a.getUserInfo(),m.fetchLog()]):s.warning("当前目录不是Git仓库，部分功能将不可用")}catch(c){console.error("初始化失败:",c)}finally{T.value=!0,console.log("---------- 页面初始化完成 ----------")}});function G(){m.fetchLog(),b.value&&b.value.refreshStatus()}function V(){m.fetchLog(),a.getCurrentBranch(),v.value&&v.value.refreshLog()}function L(){b.value&&b.value.refreshStatus()}const P=r(!1),A=r(""),y=r("");async function _(){await a.createBranch(A.value,y.value)&&(P.value=!1,A.value="",b.value&&b.value.refreshStatus(),v.value&&v.value.refreshLog())}function B(){y.value=a.currentBranch,P.value=!0}async function d(c){await a.changeBranch(c)&&(b.value&&b.value.refreshStatus(),v.value&&v.value.refreshLog())}return(c,n)=>{const H=Je,W=st,w=Oe,$=qe,O=et,R=Ye,E=Ze,J=te,re=Ae;return f(),k(se,null,[o("header",Is,[o("div",Fs,[o("img",{src:p(Us),alt:"Zen GitSync Logo",class:"logo"},null,8,Hs),n[5]||(n[5]=o("h1",null,"Zen GitSync UI",-1))]),o("div",Js,[p(a).userName&&p(a).userEmail?(f(),k("div",Ws,[n[6]||(n[6]=o("span",{class:"user-label"},"用户:",-1)),o("span",Zs,D(p(a).userName),1),o("span",qs,"<"+D(p(a).userEmail)+">",1)])):ee("",!0)])]),o("div",Ks,[T.value?(f(),k("div",Ys,[o("div",ea,[t(qt,{ref_key:"gitStatusRef",ref:b,"initial-directory":g.value},null,8,["initial-directory"])]),p(a).isGitRepo?(f(),k("div",ta,[t(Ts,{onCommitSuccess:G,onPushSuccess:V,onStatusUpdate:L}),t(Ns,{ref_key:"logListRef",ref:v},null,512)])):(f(),k("div",sa,n[9]||(n[9]=[o("div",{class:"card"},[o("h2",null,"Git仓库初始化"),o("p",null,"当前目录不是Git仓库，请先初始化Git仓库或切换到Git仓库目录。"),o("div",{class:"tips"},[o("h3",null,"可以使用以下命令初始化仓库："),o("div",{class:"code-block"},"git init")])],-1)]))),t(re,{modelValue:P.value,"onUpdate:modelValue":n[3]||(n[3]=x=>P.value=x),title:"创建新分支",width:"30%","destroy-on-close":""},{footer:i(()=>[o("span",aa,[t(J,{onClick:n[2]||(n[2]=x=>P.value=!1)},{default:i(()=>n[10]||(n[10]=[j("取消")])),_:1}),t(J,{type:"primary",onClick:_,loading:p(a).isCreatingBranch},{default:i(()=>n[11]||(n[11]=[j(" 创建 ")])),_:1},8,["loading"])])]),default:i(()=>[t(E,{model:{newBranchName:A.value,selectedBaseBranch:y.value}},{default:i(()=>[t($,{label:"新分支名称"},{default:i(()=>[t(w,{modelValue:A.value,"onUpdate:modelValue":n[0]||(n[0]=x=>A.value=x),placeholder:"请输入新分支名称"},null,8,["modelValue"])]),_:1}),t($,{label:"基于分支"},{default:i(()=>[t(R,{modelValue:y.value,"onUpdate:modelValue":n[1]||(n[1]=x=>y.value=x),placeholder:"选择基础分支",style:{width:"100%"}},{default:i(()=>[(f(!0),k(se,null,ae(p(a).allBranches,x=>(f(),Y(O,{key:x,label:x,value:x},null,8,["label","value"]))),128))]),_:1},8,["modelValue"])]),_:1})]),_:1},8,["model"])]),_:1},8,["modelValue"])])):(f(),k("div",Qs,[t(W,{class:"loading-card"},{default:i(()=>[o("div",Xs,[t(H,{class:"is-loading"},{default:i(()=>n[7]||(n[7]=[o("svg",{viewBox:"0 0 1024 1024",xmlns:"http://www.w3.org/2000/svg"},[o("path",{fill:"currentColor",d:"M512 64a32 32 0 0 1 32 32v192a32 32 0 0 1-64 0V96a32 32 0 0 1 32-32zm0 640a32 32 0 0 1 32 32v192a32 32 0 1 1-64 0V736a32 32 0 0 1 32-32zm448-192a32 32 0 0 1-32 32H736a32 32 0 1 1 0-64h192a32 32 0 0 1 32 32zm-640 0a32 32 0 0 1-32 32H96a32 32 0 0 1 0-64h192a32 32 0 0 1 32 32zM195.2 195.2a32 32 0 0 1 45.248 0L376.32 331.008a32 32 0 0 1-45.248 45.248L195.2 240.448a32 32 0 0 1 0-45.248zm452.544 452.544a32 32 0 0 1 45.248 0L828.8 783.552a32 32 0 0 1-45.248 45.248L647.744 692.992a32 32 0 0 1 0-45.248zM828.8 195.264a32 32 0 0 1 0 45.184L692.992 376.32a32 32 0 0 1-45.248-45.248l135.808-135.808a32 32 0 0 1 45.248 0zm-452.544 452.48a32 32 0 0 1 0 45.248L240.448 828.8a32 32 0 0 1-45.248-45.248l135.808-135.808a32 32 0 0 1 45.248 0z"})],-1)])),_:1})]),n[8]||(n[8]=o("div",{class:"loading-text"},"加载中...",-1))]),_:1})]))]),o("footer",oa,[p(a).currentBranch?(f(),k("div",la,[n[12]||(n[12]=o("span",{class:"branch-label"},"当前分支:",-1)),t(R,{modelValue:p(a).currentBranch,"onUpdate:modelValue":n[4]||(n[4]=x=>p(a).currentBranch=x),size:"small",onChange:d,loading:p(a).isChangingBranch,class:"branch-select"},{default:i(()=>[(f(!0),k(se,null,ae(p(a).allBranches,x=>(f(),Y(O,{key:x,label:x,value:x},null,8,["label","value"]))),128))]),_:1},8,["modelValue","loading"]),t(J,{type:"primary",size:"small",onClick:B,style:{"margin-left":"5px"}},{default:i(()=>[t(H,null,{default:i(()=>[t(p(tt))]),_:1})]),_:1})])):ee("",!0),n[13]||(n[13]=o("div",{class:"footer-right"},null,-1))])],64)}}}),ra=Ce(na,[["__scopeId","data-v-a0b9db6b"]]),at=St(ra);at.use(Tt());at.mount("#app");
